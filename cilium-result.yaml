---
# Source: cilium/templates/cilium-secrets-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: "cilium-secrets"
---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-envoy/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-envoy"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
automountServiceAccountToken: false
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU54RThOM3haampUVXNwOUJIM0I5OFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qSXlNRFF4TVZvWERUSTRNREV3TmpJeQpNRFF4TVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2UTBkb2ZUeklyRVdJK3ZqbHVxRWI0QWZMUGlTWldZZXBtZGJmci9qN01QNXN4Q00KN0QrdlFLMXhhdWtOdkdyTGdLck1RcGpFbUc5R3FOUFVDN1JxdFAxajFYZ3hFb0hqbjZPaWZQZFFqSGNmN0RaNwozc1kwaU1uS2lySUZqUWZEK0ZSYjVFSmNPLy9xMWpGQWdEVENqWDV1TWVZRGhnRUZQbTB6cW9pRlp1UmlqbFU3CkZDd2k2TVpEUHZLNnYzS251dG5OeHVwcC8xbW53aGREOHNHS1UwSytRMWtnQnhJemlBZm05Yy91bGNFK01NdEUKd294bjRVQm5TUHp4TUxmTXBaaStFL0FmdWl1RmJxNytCYUVuNXFKVW02OVhWZ2pIS0kyd1RzVHVDd3pPeE5oKwoyQnR5ZTZFa3NZbGQ0cmtSN2VzL0tyVVNlQXhDNENISVd3dytQd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGREJMTGNuSGpnbkh5cUVCcjhRYVhYSlJwcGxQTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQU55cDU5c0dQYTJ1djJURllVNE1CeDc0NEFjWU8yTjEyWjJkR1ptSjMrU01NSkVoQjR4ZURRClR2Z3FhOEZSYmRaT2ZlUmsyMDUxYStxYUxNNHhqbDV5TGlQUTZlOXBDL3cvWjlYbnllbGFiWlBFOGV1Vm9mQk4KRTN1MTA5RkR6Ty9TZTB0Mko5U2lpU0lpU3ZrekxVTW5QNXExZmtXcG9NK3FZMmtFVitOL0c3ZWp5dlBIZEh3cgplYitvVCtxa1VIQmhUNzVCRlBOTmMreUhveHZNVHI0eVozcG41dElIc3c3R25CQ002ZUdTZ1pBSWJFUTRoYXkxClVEc25aN2labDNIb0Jzb0lDUHB2K0FzbjlGeVBEbzdrVllKeStiVHpYK1o2cnlZUWMyQ2YzbGJCSUo5WmY4ZGsKcWtCSS9JcmpFRzhBQVl0c2gwR3ZFMC9GZEZHV0hWcmUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdlEwZG9mVHpJckVXSSt2amx1cUViNEFmTFBpU1pXWWVwbWRiZnIvajdNUDVzeENNCjdEK3ZRSzF4YXVrTnZHckxnS3JNUXBqRW1HOUdxTlBVQzdScXRQMWoxWGd4RW9Iam42T2lmUGRRakhjZjdEWjcKM3NZMGlNbktpcklGalFmRCtGUmI1RUpjTy8vcTFqRkFnRFRDalg1dU1lWURoZ0VGUG0wenFvaUZadVJpamxVNwpGQ3dpNk1aRFB2SzZ2M0tudXRuTnh1cHAvMW1ud2hkRDhzR0tVMEsrUTFrZ0J4SXppQWZtOWMvdWxjRStNTXRFCndveG40VUJuU1B6eE1MZk1wWmkrRS9BZnVpdUZicTcrQmFFbjVxSlVtNjlYVmdqSEtJMndUc1R1Q3d6T3hOaCsKMkJ0eWU2RWtzWWxkNHJrUjdlcy9LclVTZUF4QzRDSElXd3crUHdJREFRQUJBb0lCQVFDQ0NYNkRnM0NtUVRiZwplSVl3clpsdzlLajlEdkhyNjJWVHdxNXRyZUpDWHI3bnk0K1RoVzZ2eDEzSFV3ME91RXJJY3pOUzc2L3l4ai9OCkt2K2xHWEY0a3Y3VHUvdk5KaWtEQ3RSZXJ1THA2NXE2cVBObFZlS1c0RzZBSGxteEcxRlNBL3k5TW1RdEpTaE0KTXM2U0lUaGRpVVNVOEFrbWFKZEp6R1dJZktWK0VwUjRIN044R28yY1lhSDNWUk11VjVaVktVMXUwUzBUay9NQgpMWEhzOGlYQ2NVeThqemRUTVpYRXFzQUE5WC9VRmdDaHV1eGJ2OTdtSndBRk00Z3FtMjhjdTNJRDBrM2FraWR3CjdWTDkrejNsL0MvLzlKdTJUb1oxUSszTm0vZGltV2E0Ymh3b1JhVTNhVHVsVWdwbVgrZUNsdjI3VUJaRjRyQ1IKZVdtVWpoR1JBb0dCQU85MjNsczVaVThWUnNzWjcrelZ6L3NQZHRDcGxpKy9CZnhVVU4vRUhzdDNkRXM3YXo5ZQpmU3FUQ1RScTFqNXdrei9VOU1DcFlORTZ6UE9CUEQ3OHNoT2RvVVQzeTJFUnlEY3RhSDBHMTY0eW1Qak8zekdOCjY5a1UxTS9VcGtCTlMybVg1c29vUVlPZDJqVHFUMFRvVTFzSEJnWVRSejBoV0JvM1dxRlNRMlNwQW9HQkFNb2IKRWNxNWRVN2s5d09uTWJ0bG9WcG45UTc2MGdpQzBqY2ltekpuZXpYb2UwQ05SclBEcTg3RGdZQjVOdW5vYW9zNApYVURvUHIxaXoxajVnaDQxdEtFZ3FyVDIxN05oVVBJWFlpTlIyMTdQOHExVTNBZWZGazlJeHpMZWtlTU9zVStLCk10dFJoUmZKelVISFY2RXBjM3lLNU9GbFd5K21rL1R2VElLZVVYU25Bb0dCQUlGTnNtdVg1bmg1aUt5SzZONzkKNVR3djhYeGkxbElaMStXVXNjYmlZNjZDWmkxcGZGUFBkYzdUYnBqN1I0eVh4U3NtbHJLaHcwRzNlb3ZTTVBIaQpDVlpHTzVxK0l2ZmJYajFOSzZxM1V5Y2c4ekVHbzhaaVdBUDBGNlhSc2FQdkdOVi96SU5Fa1h1OGRPTTEwbS9tCjgzdW5vejBNazk4U2JqeFp2M3AwclNkaEFvR0FhT3BXZVJ0L1J4NWJFSDFwdHJOU2FLRVF1TjhCeTBOR0p6TUMKeDg2cVNsak9LcnRzR1lPWkc3T245VzUzVUVQRGsxUUdMTnlqUFNNZktqd1VET1NxU1A2eFAxSG90WWp1UVU1YwpOcU9Xc29oV25SNHhQbythUUR3eWxEaXdHT09XcmdpNno5bG9zdW1pY09Rdm5FenRVNWl5cWtNNGErc1lZWTBiCjlhNkQ4SDhDZ1lBUU5qekNkSkNNZm1yV2hKRlp6a0lBV3hjOEIyZmxHbWhwQ0QrUXp3WHNzUk9VL2NaWEhrU3MKRkp0blhlTzBYMjhFc3RxSXkxbnpKbVRHRlN5NDhyUmdlS2pPckpQQ2Q1K251dUNIM3MrNG9EUFFJWnZqeGRWRAo2RnI1NjBEZmNaaDBJbUQ1RzMvQzdadHg5Wmp5elBDY0swOU9HYW5nWGpYWmFtZkhQdlBoS2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQ1NBejNLT0xjZDIvaUUzazVjRCtvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1qSXdOREV3V2hjTk1qZ3dNVEEyTWpJdwpOREV3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHNsTWt3N0JYOFcrRHlvNHpZSVUvWWtNd0NBUjBneEpBdTd3QUtXOW1BR2dVUU93bW4Kb2pIaU9LbVRITERuVkdqWUt6WlBCeWxId1owWm1BVGxhOGc2Ym9VVjNYSXpqSzQzc1lFYlBpMlpMWmViak9iLwpYeXY5bU1SbGJ1TWM5ZmdaR3VzS01NSFc0S2NQRnkxV0E2ejBHdk9nQW95WmhHTTdCK1RQTXlRblpBMThjM25YCk1pUEJqakpidkE1TFRUWTgyYlRnSGNLUmY5WG9jTEN1d1pXbnVsaUFsM2xTMWJ2aURKNXJDU3dDVUNmMUVWOUYKeThvWUppQ3l5NUVpRi9SOXVPMVlNZUEweW5SMkRFYUo2cmgzeU1ETEVqaXNLSmxkcis1Q1NQc3FLbmdFaS9qSgpnU2JMdFhRMnp0ZFVpeGNuZ1lJOU5QMlJheU1Cb20vVXhWK1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVUzL3dMcmVPb1MyZEVwQVcwVE8zb045RjhMZnN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFDb0plTGlzeFZzSWJHUkdmQWtNRUt0MlY1YjBIWEZmdXNwZC9wWGRGclNUcmFiVTVyelNjdGtGCm4raWp3R2hXeUNLb3lqSGJ3MkZEL0ZsN2ViOW9hdnBHYkJmc0RIbVF5VnFEYSt1SG9EYXhEYnhSc1RwU2RSOEMKL2xsQlprU2NSZnJFNDAzWEllbDVvcjV5bHZWWk9ocEU4Z2FheFN4eUZRV0V4SmVubG1EcG0weXM5Q0NnNEVDVQozdGhRMVU4SE5vejNNbUxlcmtjYnV2R2VyL3NCZkxkS002Tzc3YlAxYWNkYndTY3R1SGhJVHZsYldscGRGT1FDCkJzUkhIM29uVGZjOGJrZjc1NFBWQXg1UFptc2llU3ZrT1hJLzNDTjRzUlNzUnFDaTZCSVRRVTF5bi9nTWVaeWUKeVpiRVJyVHNUbkxGR2RpNDgvcDFGVTdORnZBQlJubz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lRQWppc0xXMHdaWUE2Q0xwVGF1ZW96REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1qSXdOREV3V2hjTk1qZ3dNVEEyTWpJdwpOREV3V2pBWE1SVXdFd1lEVlFRREV3eGhaRzFwYmkxMGFYQmhibWt3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBCkE0SUJEd0F3Z2dFS0FvSUJBUUMzdGdKbWRlU1ZQenpua3dFbUo2TlI5TjJmZVIzZGlaRnRFM2VqN2RWZlM0Q3EKS1pzYkw2WFFmOXVKSlFxTmFKWWxNR3VBTXd5VExtZWd6NjhIMXdVdEtyREwxTllRN2I3K1JJeWJEUDgyVjY0SwpISC9qZ2ltdEUvMTBrYjNMczREOXhxNFAzS0czVUZ2Z2NHZU9HL29UOVVBdU9UL2daRTNSaklrems3c000cll0ClZ0bVR2TTN1Tzc1K0trRHgrMUN4L0hOQzBEOTMveW40WWdxYU00MnRlTEVpc3N1SXM5d3l0ZlNLL0Z1SHZoMnIKelUyeXpJQkE0d1F1bThCdUJ2a2JzalVCRE1nSWhnZ09GVmJXMkdiWUE3VVpnWVZaMWtGZU5kZFYwOTFoTGdyeQpKTWg3WWgvcUtFWURSbnJteDBpcFVpWE1nUld2ei91bXhQMkZOQzF0QWdNQkFBR2pZREJlTUE0R0ExVWREd0VCCi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC8KQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlRmL0F1dDQ2aExaMFNrQmJSTTdlZzMwWHd0K3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFrbVhvOEpiYkYyYTE4c1lPUFZuWCt5RVZyMGl3NTdOdFVOa3ZxUm43OFFrQkwwUGNhd0JqCkJOQ3RHODRVcHlwNmF4RlpSREhpT1JGRU5jbVJtNWxZNXZ0S3NCaGRPRG5GRW8vbWJPZ3Z3di9kd2NENzQ2VU8KMmgvSEM5a3owVEFSODB4MzlRbFVRNEFleWlVR3RkaUg0UDRLVjRaVzhsUnBZQmlQTEp4WktPS1FuOEpaTDJmLwpISUkwNUtVM0t4YXpiOGdRTHhoM3lSUnlHeTJ5czhmUEpiWUhJMnEySytFM1VZbk9FTTArSTVqVlZVaWRHenFXCnVMTVo1bExFQVFUajNhTnRwUm1pYzl6aENrQjl3NUdNOENwaFpFYy9IVk9oZEpDbUVPc2IvSnNLV0prYndIV1QKL0liL2daeHlTMGNnQng5K3Rjdm5yTXJmR0ZDZkZrWXF2UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDdZQ1puWGtsVDg4NTVNQkppZWpVZlRkbjNrZDNZbVJiUk4zbyszVlgwdUFxaW1iCkd5K2wwSC9iaVNVS2pXaVdKVEJyZ0RNTWt5NW5vTSt2QjljRkxTcXd5OVRXRU8yKy9rU01td3ovTmxldUNoeC8KNDRJcHJSUDlkSkc5eTdPQS9jYXVEOXlodDFCYjRIQm5qaHY2RS9WQUxqay80R1JOMFl5Sk01TzdET0syTFZiWgprN3pON2p1K2ZpcEE4ZnRRc2Z4elF0QS9kLzhwK0dJS21qT05yWGl4SXJMTGlMUGNNclgwaXZ4Ymg3NGRxODFOCnNzeUFRT01FTHB2QWJnYjVHN0kxQVF6SUNJWUlEaFZXMXRobTJBTzFHWUdGV2RaQlhqWFhWZFBkWVM0SzhpVEkKZTJJZjZpaEdBMFo2NXNkSXFWSWx6SUVWcjgvN3BzVDloVFF0YlFJREFRQUJBb0lCQUVMbWV6VkkxWGNzVWtlYQpseDZIN01mWnZpTm0vZU5CUjc1TENwU2Q5Y2dBUE5pNjBnc3liTlhpMmRXMXNZUVJoQ3dDMkFNVmxBeTlKMnUrCmRlVUsvbzJXTUUvcU1CSjJJY21DdVJsMXdETFA5MGNqWGNkQ0RWOUVHbGFyQkV6OEQ0dGJJT1FSMnFwaER6UksKZXN1YmtKUllDWWxMdStGQlpiMWJ5bE1JQjJRSFJKOFlvRFo4d2U0dDlHOWppSHNuYWYyQ3RqT3k3amhSNC9yUApyQWFHYjJGRGs5WVhsODZaOVVXblYyTEF4YXE5TDRpODBkZ0cxbXlOL1ErQjRyV01haDg4bS9qWitYSmVlQ2ZGCmx2akErNnQ5WE5sc21sQWJvTlZtYzlsYmwvbmlFOHRWNmI2ZTJ1UlJ3SWhTRGxXNHRBenQrV0ViM2ppdHFrNlEKV1B1djE1a0NnWUVBOGZJazFtc0huNlpMdFB6L0x0MXBvY1RKR2xxUlc3MDAzaXpFSmQrWGsxTVQrcVVTTThlNQpIaXRVSVpCOVRIV2FaN0NKMnhIaHQzeCswUTFMRk9HMXA1Nk96bGVrTzBGOEZ3YXNJNFFPYVlIUmVJd0xscnpFCkZ6TjY1NVVBNCtIVDl4RzlFZGhNTnM0cm5ZaHJCaXQvNzZrUU9YTndXdnJZMURDUUpzY2wyMWNDZ1lFQXdtSGkKSmxvRW5mK3ZUblkvdXpzVUd5QkxXejIrNFRUSytyZHU0WGRJMDZJcVRrRHJ6dmpZakNJUUx4TmhWNEIydGNTTgo0a0x4OTFrdmp0TittVkdzbXRjN3g3NHM4ekRqcjF1KzhNc3B0WGExUkwwK0hTakF0L1lCa1hnRXFzcW0xeUN1CmlqNnR0OUdsSHNzRmJzVWRVczRVRXhvaFJ1QXNXT2loV29IT2h0c0NnWUFxNER5Qyt3aW8xREdLYTJOVmpNdFIKYmF3dHpXc0JGUEN2aHNOajZ0SFR1OTlJaGNSS0JOVGJjZFpBOUhnZitwOVlUTUxCWGRQZ1RtR3k3bVlsMXpIMworSE5hUWRISzVubjFJcXVTeDY0K0tGRlV5WXlzTTl1VU9QMUkyUEVGY1ZtODZSbldkYnhiNGdGOHMxWTBDN1ZxClpVMkl3TnBpWlIzVHpKOWZIOStubFFLQmdDelpTc1dRaFhveThTN0lSOElhU25STHlqYytFdG1CUmNmOUpMOHUKdDRYazU1L3dpTGZUWUp0TWpMRmY1bGk3RWlpME5neGJaOXFySURiekEwVzZ1M2xxYWFlWGNHV1lCU0NEcVpXRApPcGRjMFV3UDRkSDJnaWl2d1FMZ1R5dGM0SXZJUlowdUF3VGpnUmFPdnkwa203UnNTZU55WnZVa2FmY0ZqWjBGClVESjdBb0dCQUpKUXhQZkhZT2V5UGlKdWZ4RUZ0M3c4dzlGcytvYmowTHc5NE5JYUVXUEhFZ0o1c3cvRVVRSE0KOEh4MERQOEFPMzRhNFRTcWhjbEVBOHkvam1qaHNjNWNQcnNTekMvbWx1aENacEFnQmlpanF4ZzEvOWxnS0szZApIVHI2dXFYRFY2a0FMM3BzTTlUTlFzNGYyWUVkRVVvVTF1Q3ZKUkgvbmFGRm9yWWdBK2hjCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQ1NBejNLT0xjZDIvaUUzazVjRCtvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1qSXdOREV3V2hjTk1qZ3dNVEEyTWpJdwpOREV3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHNsTWt3N0JYOFcrRHlvNHpZSVUvWWtNd0NBUjBneEpBdTd3QUtXOW1BR2dVUU93bW4Kb2pIaU9LbVRITERuVkdqWUt6WlBCeWxId1owWm1BVGxhOGc2Ym9VVjNYSXpqSzQzc1lFYlBpMlpMWmViak9iLwpYeXY5bU1SbGJ1TWM5ZmdaR3VzS01NSFc0S2NQRnkxV0E2ejBHdk9nQW95WmhHTTdCK1RQTXlRblpBMThjM25YCk1pUEJqakpidkE1TFRUWTgyYlRnSGNLUmY5WG9jTEN1d1pXbnVsaUFsM2xTMWJ2aURKNXJDU3dDVUNmMUVWOUYKeThvWUppQ3l5NUVpRi9SOXVPMVlNZUEweW5SMkRFYUo2cmgzeU1ETEVqaXNLSmxkcis1Q1NQc3FLbmdFaS9qSgpnU2JMdFhRMnp0ZFVpeGNuZ1lJOU5QMlJheU1Cb20vVXhWK1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVUzL3dMcmVPb1MyZEVwQVcwVE8zb045RjhMZnN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFDb0plTGlzeFZzSWJHUkdmQWtNRUt0MlY1YjBIWEZmdXNwZC9wWGRGclNUcmFiVTVyelNjdGtGCm4raWp3R2hXeUNLb3lqSGJ3MkZEL0ZsN2ViOW9hdnBHYkJmc0RIbVF5VnFEYSt1SG9EYXhEYnhSc1RwU2RSOEMKL2xsQlprU2NSZnJFNDAzWEllbDVvcjV5bHZWWk9ocEU4Z2FheFN4eUZRV0V4SmVubG1EcG0weXM5Q0NnNEVDVQozdGhRMVU4SE5vejNNbUxlcmtjYnV2R2VyL3NCZkxkS002Tzc3YlAxYWNkYndTY3R1SGhJVHZsYldscGRGT1FDCkJzUkhIM29uVGZjOGJrZjc1NFBWQXg1UFptc2llU3ZrT1hJLzNDTjRzUlNzUnFDaTZCSVRRVTF5bi9nTWVaeWUKeVpiRVJyVHNUbkxGR2RpNDgvcDFGVTdORnZBQlJubz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU8wMnVNdE5uRWVHazYvWGkyRXZScll3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qSXlNRFF4TUZvWERUSTRNREV3TmpJeQpNRFF4TUZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXhCMCtwWk5aYXJOVnZtR0hPK2ZndTI1d0RRcCtrWWM5Y0pTSkcxVVhCNTBQVGxPYlR4TmIKaHdVRzVNZjJuNlJaZVlBWDVDbGpVS1l5OVFtQVhvMzk2eXdhcEk3OW1aaEVVNTBRcXp6eVdMNVV1WUYzeFJsZgo2eUtzRU1JNHZHeUJZbzhCb0t5QmFGRHlUQUYrcDNlVlpZRldHem43ZXVtUUtYam1qUGVOUjluK1NoYTZOdndiCk04TGF6VEF5VzF5bnJGWGV0TUlCR0VoSWF1QmhnNWZ4dmFQUGNPbnczeXNoWFQ1RFR0Ry9iMjZsZG5mYk9XLysKV3pEdjdJQmdCMkRwS0hZWXpZSEtWTnI2MFRYYnY3UVZsaWQvVEVKR2hJcEF0eHFiUHJpZDBQSVdqUktRRjhIZgo1K0VyQ1RRTXBZNE5MSzU0ZU5MeFVMclo3U3dtTk1HR0JRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVTMvd0xyZU9vUzJkRXBBVzBUTzNvTjlGOExmc3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQU9jMEpiOUx3U2pWZHoyL1R5VGdtRjdhS1JkenE3MEh5ZEd2R08zUFNJV2lpKzFYUFRqUytjVDYyTkQ0ClZDRGNnUGl4emFyUHRjWEhkR2ROM2F0STluSEF3KzRrTnhqSGovbENrM0VSQzlkY2VRbG9OMitTRTd6bFRITmkKTys2SjViMERaTUo2TUJuc0NTY2l1Y0tCajZqSDlIVUVyMkVBbjRwKzF2MW1ETDFGVjRDWnBjbFdDd0d3T1AzZwpRZUVIZ0ppOWUvUzM2VW1BeStqenhsSFMzTFU3VS8wRlpZYXpTOGZXMWovK3ljZkRxZkJISFVPWGl2bWNtY1h5CmR6d2JjTWpscCs5aVl4WEdNcHV4Rkw0WkNiRmJWbUNIV0xCUHFjSlhsa1UrMEVkY1Y5WE03ZS9raGlsclpQMk4KQnk3TVlwaWxvcDlRbjZnU0hxNXlPWXFoU1gwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeEIwK3BaTlphck5Wdm1HSE8rZmd1MjV3RFFwK2tZYzljSlNKRzFVWEI1MFBUbE9iClR4TmJod1VHNU1mMm42UlplWUFYNUNsalVLWXk5UW1BWG8zOTZ5d2FwSTc5bVpoRVU1MFFxenp5V0w1VXVZRjMKeFJsZjZ5S3NFTUk0dkd5QllvOEJvS3lCYUZEeVRBRitwM2VWWllGV0d6bjdldW1RS1hqbWpQZU5SOW4rU2hhNgpOdndiTThMYXpUQXlXMXluckZYZXRNSUJHRWhJYXVCaGc1Znh2YVBQY09udzN5c2hYVDVEVHRHL2IyNmxkbmZiCk9XLytXekR2N0lCZ0IyRHBLSFlZellIS1ZOcjYwVFhidjdRVmxpZC9URUpHaElwQXR4cWJQcmlkMFBJV2pSS1EKRjhIZjUrRXJDVFFNcFk0TkxLNTRlTkx4VUxyWjdTd21OTUdHQlFJREFRQUJBb0lCQUNSQms5ZGdpbU5qakRLSwpMVW94OENZMm9KaUluQ1dqYndSbE1ZUFFFMVhnLzNkbmxZcms5VUxjOXcxTXVwZUE5dG16aUxjeHY1NmxXejVaCjUxV1R3cUc3b2FGU25pZkxNcmFTandaWldpUjE2NHZ3RjRoa3pJclgraCtQQ0pZdEtTNWphZFdlanI0T1dQMGMKT2FJVVJaWmlkdHpKdDJoZHpiMGRFT0oyMGJPNmtpdFVPcmFBaUM1bXUvVzlNcnlEMWFQTlg4TTRoM0pKM3R3awpDcDYrUzRlbndycHdjcXp2TldKWHljbFlwTjB3QkIvK3liWFZuQXpvcXk2eUhHM0xUL0hQVHNrazN4L0w3ZlBuClZZL1dRbzhwQ0dndjJtVGtaK0tGV3hEMkRCWmx5ZlRnMDdhdW1lU2JTc21FZExZQWRkazZoSS9sY3dqRTY1TFgKcXBvRnZuRUNnWUVBK1RLaGM2L1NwczE1M2xIbGxVMFd5V281ZHBKMmtiVmhja0hReXRoUzVGdUpRQll3bXpYdgpGVHNhT1Q5K25wSzZ2WDFQaWRtbktZYS9zUlZKb0h3L1dGUmFhdFl2N1ZlQTJabW91UUpSQXBYZWs2MzdmVDZCClNaQk9ldmo5SU16Q2NTSDRYWmRNRllCdTRwdzBjZ01YeHJwNWFKUDNaK2p3NDJJYVlDYUVJZmNDZ1lFQXlYZXIKNmhnSjlUbVpUN2hmVDFsYWgzZTNGTFFwNlFmRDZEUlRKSzZoakxWSVp1aTZsQ3lJZkZhWnhKQSt6RGo1MjZJMgprS25yY1hoTjZtd2F0UkRCeGFDblNiaGN3cHMvbzZFVnhJV0doVHk0LzRuUmJFb3pvVGlhcG9VWW1tc3NBU1dTCk1xNWpXcHNQbEtSMUNPQmpReDFDdDBVVVJSSEFreEtRcjhySjJPTUNnWUVBbFRMUkkzaVRnTGJwVGtodVVwT1QKSHdod1d5T1p4ZWQ0N25XbFVxMXVBN2NpVjdKeGE1eEJCczhhQmtpVHdORk02UUxMeWxiOEZJck8zbkZHWWNYQwpEMXFCd0JGNUpIc05kRHJobjlOWk9Wa05xQkcwenVuTGNvWHAxd3FZVXprRStjTkM5cFlOUVpwaHlWK0lydkpYCkcrNnRuZ1ZwVFZkVVVtOThKekVvVDBVQ2dZQVFPLzExYXFSNnh6NXNaeDMvQmVNK29VMzJkQ0lnYmdqQ1VGMFcKeXArbjkvK3lrelJkdGt6MVFBRTZEcW1ReVZLUStUeE9ZZkxmL09MQ2JoMmswNG5ady8xVyttMDNIVTErZ1ArQgpDNFZ3ZlJrbk5sTFMyQlBhL1BXeFQyNVJHeXU3bCt4MCt3cDBoYVEyeFIzTkxrK3hXODFCZVdhTnZrVjNWSHFtClA4QU9Jd0tCZ1FDTFJJRm0wbFNWaXk0K3hPQjVhczM1YUhvRVNlR1BYNmZtOWZhbjcyZXhDMnRndW9lQ3YrYXgKQXBZMU1nY0s4WXpxZDRsbjQzWmE1aVFockRJVWQ5VE4rR0NheFBhQVZmakUvdUI0blc0anN5eTRWb3drRVlBbwpVLyt4akNhVHM5RTl6Q0JZdjNTci9nTXYrbU9UVlZJV1ZXd2dNYVlXRmwxaWZMR1JFajM5a2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQ1NBejNLT0xjZDIvaUUzazVjRCtvekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1qSXdOREV3V2hjTk1qZ3dNVEEyTWpJdwpOREV3V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHNsTWt3N0JYOFcrRHlvNHpZSVUvWWtNd0NBUjBneEpBdTd3QUtXOW1BR2dVUU93bW4Kb2pIaU9LbVRITERuVkdqWUt6WlBCeWxId1owWm1BVGxhOGc2Ym9VVjNYSXpqSzQzc1lFYlBpMlpMWmViak9iLwpYeXY5bU1SbGJ1TWM5ZmdaR3VzS01NSFc0S2NQRnkxV0E2ejBHdk9nQW95WmhHTTdCK1RQTXlRblpBMThjM25YCk1pUEJqakpidkE1TFRUWTgyYlRnSGNLUmY5WG9jTEN1d1pXbnVsaUFsM2xTMWJ2aURKNXJDU3dDVUNmMUVWOUYKeThvWUppQ3l5NUVpRi9SOXVPMVlNZUEweW5SMkRFYUo2cmgzeU1ETEVqaXNLSmxkcis1Q1NQc3FLbmdFaS9qSgpnU2JMdFhRMnp0ZFVpeGNuZ1lJOU5QMlJheU1Cb20vVXhWK1ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVUzL3dMcmVPb1MyZEVwQVcwVE8zb045RjhMZnN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFDb0plTGlzeFZzSWJHUkdmQWtNRUt0MlY1YjBIWEZmdXNwZC9wWGRGclNUcmFiVTVyelNjdGtGCm4raWp3R2hXeUNLb3lqSGJ3MkZEL0ZsN2ViOW9hdnBHYkJmc0RIbVF5VnFEYSt1SG9EYXhEYnhSc1RwU2RSOEMKL2xsQlprU2NSZnJFNDAzWEllbDVvcjV5bHZWWk9ocEU4Z2FheFN4eUZRV0V4SmVubG1EcG0weXM5Q0NnNEVDVQozdGhRMVU4SE5vejNNbUxlcmtjYnV2R2VyL3NCZkxkS002Tzc3YlAxYWNkYndTY3R1SGhJVHZsYldscGRGT1FDCkJzUkhIM29uVGZjOGJrZjc1NFBWQXg1UFptc2llU3ZrT1hJLzNDTjRzUlNzUnFDaTZCSVRRVTF5bi9nTWVaeWUKeVpiRVJyVHNUbkxGR2RpNDgvcDFGVTdORnZBQlJubz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQUxHU05yS2d4ZHhIb1lqam5kdm00aG93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qSXlNRFF4TUZvWERUSTRNREV3TmpJeQpNRFF4TUZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQVBHaFZnbEpEUWpUTGRxZVNiVnUKUjVHSDI0ZkdJMXJabjNmbjI0WVRoaUNVQUVESkZKWjNsMGh2QnR5emgyZm9HVHVXaW91SjZ0V0R5OS9KOEY5egpJODFoK0FqRmM3QWxPR1YzWmtWTnNCTUVRNUVWb3RtNCtEOXdsWTgxOXh0dTRWSTlqMWdVaWV6cTJUemEvcTVvCkhXcUZXMHBIWWVLNEFYSTBpR2phK3AySnplRjJXcmVYZVYxcVVWS3ZzNjdSNTZZVDc5aVRzVTNQY0ltMHM2SVgKSlZtdEV4dSt2NkUyMDgra3lpN3BwaCtERU5xN1N4YTdpVkZvYjZ6ZnVPMC9xcmhtRjRoVEh6Wk0rMldhcll5QgpuT0tZZ1dQWWlVZm9rVDRkaXIyWVkrSXpjS1ozQlJkdGdDMUpwUVk5T1M3N3VrUHIxZk5nRkY4T0owZ2FpV1ZWCjJvY0NBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVTMvd0xyZU9vUzJkRQpwQVcwVE8zb045RjhMZnN3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBMkVTUWFEVkxVYUs5N1dMTkNXbEhsdUZNTGdGZHU0Wjc5cFRKYUY5NlZFeXhqTVdrCk1IRmJDWFF4RW00UHNJeGtPb0UzckZpejcvbzhqMzllMTZBOUY5M2VvcVZPc09scFFaamh5ZjlFYlVHaXNESUoKSkRYc2V1Y25yZ216d0NkWHV3S3FKME1aQk5vRzZFQS81WnNMMkw0NVhla0ppK05NaHlDNmlTa1JkR3N2ZGo1awo3eHpISW5aUEJnbVp3K3djSi95ZTFpMU90TW9aYS9UOE5jUTYzUGt6Y3Jub0xGRTIwb204c2gwWk81SEM2L3NuCjhLZVMrbjBRVDFQV216Q2NYTEV0M21MWGtKVStUQUdRaUxQeTRIdm5MN2NXTmJXb0lvUzY4ZFUrbnQ3Y1ZwV3IKaG5rdGFMbnZGdG9mVWJTUGR2UmFOSHdsaG5Cb2Qzc0JiQnZMVnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOGFGV0NVa05DTk10MnA1SnRXNUhrWWZiaDhZald0bWZkK2ZiaGhPR0lKUUFRTWtVCmxuZVhTRzhHM0xPSForZ1pPNWFLaTRucTFZUEwzOG53WDNNanpXSDRDTVZ6c0NVNFpYZG1SVTJ3RXdSRGtSV2kKMmJqNFAzQ1ZqelgzRzI3aFVqMlBXQlNKN09yWlBOcitybWdkYW9WYlNrZGg0cmdCY2pTSWFOcjZuWW5ONFhaYQp0NWQ1WFdwUlVxK3pydEhucGhQdjJKT3hUYzl3aWJTem9oY2xXYTBURzc2L29UYlR6NlRLTHVtbUg0TVEycnRMCkZydUpVV2h2ck4rNDdUK3F1R1lYaUZNZk5rejdaWnF0aklHYzRwaUJZOWlKUitpUlBoMkt2WmhqNGpOd3BuY0YKRjIyQUxVbWxCajA1THZ1NlErdlY4MkFVWHc0blNCcUpaVlhhaHdJREFRQUJBb0lCQUNHVHJOUC9mYnN6TlZVQwoxL1ZKVE5LeFVWVk51RTRBbmNOWXljMlkydk9kL1djRFNrUWFmRUJKaFdlWDN3SVdZNk0vS1NONDE5UXh5MXZlCndQTlNtYkFKcENENzV6YWNCWGs4SFU4V0c1aVk2QmE2TGZZWldRM2Z4RGl4WkJSQTFUakxheWJ2TzdkYmJ6S2cKci9GbWNHZ0QvZ3FWWHNuVmpnWGp2T3p0T1JRNDgrMUNVNStwbU9pdHJKdFRqUk9sSVlUdkFiTTBISXkvc0VwcApBWHgzdmRrNTdyUGdtSEJ3bXhUMlJITDZOV0haWjFFRkV1bkFrMW9UY25jT1hqWDN1QVdWTVY3ZG01UXZYR1NxCmZnRkdpWDZZNHU1Y0EzU0N0Z1FCRVMyVWZieERuZU42Q3ZxQWtRcTZheFc0d0Uwb3YzZk1HU3RhSzBuY1E5TWcKUXlWbDhaRUNnWUVBOVplRmk5bTZyQjJOUVFma0U0cjZkbWlUYU9WS3BMbW85N08wbmRJU1lWWWxIN1VJWC9wSQozMnltMHk2UUdtaGVCd1ljanBZQUpobHBvdDNFb1ArdlNaNHMvbmVQQnMxOXQzMmFuRXlmYmZ0YXBsdUpCOUdYCnQ1MjI2MzlzM3ZnbVY2RFovS1lwV2tGd3VVTVRhNlpBQzVFSTFEZEttNnpyVW9QTEV5VDIwNjhDZ1lFQSs5N1YKWURKcGN3a3phUWxFR0Qvanh6TVdJK0pJc00xOURPcjloN08waDdmZFM2VUdRUW45SHBlaCtnQ1ZsRUpoZUlSTQpVYWtrQ2dHeEpQTFdzWmpsM09RM25BQlpxRS9EM1VabHpyOUt3b0dqOXh1UlVTZHZEY2R4bEhWY0ZiZU9KY2dHCm1pM0NHRWVPNGtIVktZcWRlWEZSVnlZcGxKU1Rua2MzcFJlNHBLa0NnWUVBalo3eXc5S3FjdFlYdm9odVhWYW4KVitDMklLY1loQ1VMNnNzV1BHd0hiVm5mem9qMmEySkk0NDRrSldPVWRhWDVrdE5UWkdYYmNCejNiWk8wNzZLQgowbElFWURsUm9QcWVwRkVwOXplNE9CUGFFbFIya0t1c2NaWGhCYXhWZTc1ZFhlckR5WTJJQ3lQeGZPUFJMeUtQCmpCdjJtMm5HL0Q2YTlOcExJSjhRTnNFQ2dZRUF4dVJvU3RhRVBycjlSZXh6UVZMeVk5TUxvTHFIL0ZYSWNmTCsKMGJJdTFSMTBPcy9ONkg0aXk0Mmg4dkdUTE1oZWYvUzQ3Nk5KT2oycnpTbVdNQmcxTEFGcmlGMGViN0xOVUdiTwo3anhRcE5nS3lvK1NhU3RpbnRibjhmdmJBNnMzTE02UHFDQ0tMUElVK3NaUnRjUW9Ka1k5blR3ZGlaN3FFd3JaCi9oeUZTa0VDZ1lFQW92bFNSRnFCU1lSaUxJRElYZlpRQmFqM2VWV0NSUXhpaGpqTE82UG1ZVTZzTzdSM2ZYcDAKVy9rTFNBTmcyZFNkblRBdTlOekNGVzlHZElpazVpOVZmOTE2eGd5K2w0ODQwOTdoRmNqa1JCQWpKTXBpdHRsTApjQ3E0OUt2dFpnNHAvSFJnOVNUVkh4WDlTc21ERHltTXkxZzJ4N0p4YjRxQThtSVFhN1RSOXZzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-config/clustermesh-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-clustermesh
  namespace: kube-system
data:
  everest: ZW5kcG9pbnRzOgotIGh0dHBzOi8vZXZlcmVzdC5tZXNoLnplcm9sYWIubGluazozMjM4MAp0cnVzdGVkLWNhLWZpbGU6IC92YXIvbGliL2NpbGl1bS9jbHVzdGVybWVzaC9jb21tb24tZXRjZC1jbGllbnQtY2EuY3J0CmtleS1maWxlOiAvdmFyL2xpYi9jaWxpdW0vY2x1c3Rlcm1lc2gvY29tbW9uLWV0Y2QtY2xpZW50LmtleQpjZXJ0LWZpbGU6IC92YXIvbGliL2NpbGl1bS9jbHVzdGVybWVzaC9jb21tb24tZXRjZC1jbGllbnQuY3J0
  tipani: ZW5kcG9pbnRzOgotIGh0dHBzOi8vdGlwYW5pLm1lc2guemVyb2xhYi5saW5rOjMyMzc5CnRydXN0ZWQtY2EtZmlsZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoL2NvbW1vbi1ldGNkLWNsaWVudC1jYS5jcnQKa2V5LWZpbGU6IC92YXIvbGliL2NpbGl1bS9jbHVzdGVybWVzaC9jb21tb24tZXRjZC1jbGllbnQua2V5CmNlcnQtZmlsZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoL2NvbW1vbi1ldGNkLWNsaWVudC5jcnQ=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  enable-envoy-config: "true"
  envoy-config-retry-interval: "15s"
  enable-gateway-api: "true"
  enable-gateway-api-secrets-sync: "true"
  enable-gateway-api-proxy-protocol: "false"
  enable-gateway-api-app-protocol: "false"
  enable-gateway-api-alpn: "false"
  gateway-api-xff-num-trusted-hops: "0"
  gateway-api-service-externaltrafficpolicy: "Cluster"
  gateway-api-secrets-namespace: "cilium-secrets"
  gateway-api-hostnetwork-enabled: "false"
  gateway-api-hostnetwork-nodelabelselector: ""

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "true"

  bpf-events-drop-enabled: "true"
  bpf-events-policy-verdict-enabled: "true"
  bpf-events-trace-enabled: "true"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: tipani
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "1"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  routing-mode: "native"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-tcx: "true"
  datapath-mode: "veth"
  enable-masquerade-to-route-source: "false"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  direct-routing-skip-unreachable: "false"
  enable-local-redirect-policy: "false"
  ipv4-native-routing-cidr: 10.0.0.0/8
  enable-runtime-device-detection: "true"

  kube-proxy-replacement: "true"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  bpf-lb-sock-terminate-pod-connections: "false"
  nodeport-addresses: ""
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-mode: "dsr"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "false"
  arping-refresh-period: "30s"
  k8s-require-ipv4-pod-cidr: "true"
  k8s-require-ipv6-pod-cidr: "false"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-node-selector-labels: "false"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "true"
  ipam: "kubernetes"
  ipam-cilium-node-update-rate: "15s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "10"
  k8s-client-burst: "20"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  dnsproxy-socket-linger-timeout: "10"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-initial-fetch-timeout: "30"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "true"
  envoy-base-id: "0"

  envoy-keep-cap-netbindservice: "false"
  max-connected-clusters: "255"
  clustermesh-enable-endpoint-sync: "false"
  clustermesh-enable-mcs-api: "false"

  nat-map-stats-entries: "32"
  nat-map-stats-interval: "30s"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/cilium-envoy/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-envoy-config
  namespace: kube-system
data:
  bootstrap-config.json: |
    {
      "node": {
        "id": "host~127.0.0.1~no-id~localdomain",
        "cluster": "ingress-cluster"
      },
      "staticResources": {
        "listeners": [
          {
            "name": "envoy-prometheus-metrics-listener",
            "address": {
              "socket_address": {
                "address": "0.0.0.0",
                "port_value": 9964
              }
            },
            "filter_chains": [
              {
                "filters": [
                  {
                    "name": "envoy.filters.network.http_connection_manager",
                    "typed_config": {
                      "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
                      "stat_prefix": "envoy-prometheus-metrics-listener",
                      "route_config": {
                        "virtual_hosts": [
                          {
                            "name": "prometheus_metrics_route",
                            "domains": [
                              "*"
                            ],
                            "routes": [
                              {
                                "name": "prometheus_metrics_route",
                                "match": {
                                  "prefix": "/metrics"
                                },
                                "route": {
                                  "cluster": "/envoy-admin",
                                  "prefix_rewrite": "/stats/prometheus"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "http_filters": [
                        {
                          "name": "envoy.filters.http.router",
                          "typed_config": {
                            "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
                          }
                        }
                      ],
                      "internal_address_config": {
                        "cidr_ranges": [
                          {
                            "address_prefix": "10.0.0.0",
                            "prefix_len": 8
                          },
                          {
                            "address_prefix": "172.16.0.0",
                            "prefix_len": 12
                          },
                          {
                            "address_prefix": "192.168.0.0",
                            "prefix_len": 16
                          },
                          {
                            "address_prefix": "127.0.0.1",
                            "prefix_len": 32
                          },
                          {
                            "address_prefix": "::1",
                            "prefix_len": 128
                          }
                        ]
                      },
                      "stream_idle_timeout": "0s"
                    }
                  }
                ]
              }
            ]
          },
          {
            "name": "envoy-health-listener",
            "address": {
              "socket_address": {
                "address": "127.0.0.1",
                "port_value": 9878
              }
            },
            "filter_chains": [
              {
                "filters": [
                  {
                    "name": "envoy.filters.network.http_connection_manager",
                    "typed_config": {
                      "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
                      "stat_prefix": "envoy-health-listener",
                      "route_config": {
                        "virtual_hosts": [
                          {
                            "name": "health",
                            "domains": [
                              "*"
                            ],
                            "routes": [
                              {
                                "name": "health",
                                "match": {
                                  "prefix": "/healthz"
                                },
                                "route": {
                                  "cluster": "/envoy-admin",
                                  "prefix_rewrite": "/ready"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "http_filters": [
                        {
                          "name": "envoy.filters.http.router",
                          "typed_config": {
                            "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
                          }
                        }
                      ],
                      "internal_address_config": {
                        "cidr_ranges": [
                          {
                            "address_prefix": "10.0.0.0",
                            "prefix_len": 8
                          },
                          {
                            "address_prefix": "172.16.0.0",
                            "prefix_len": 12
                          },
                          {
                            "address_prefix": "192.168.0.0",
                            "prefix_len": 16
                          },
                          {
                            "address_prefix": "127.0.0.1",
                            "prefix_len": 32
                          },
                          {
                            "address_prefix": "::1",
                            "prefix_len": 128
                          }
                        ]
                      },
                      "stream_idle_timeout": "0s"
                    }
                  }
                ]
              }
            ]
          }
        ],
        "clusters": [
          {
            "name": "ingress-cluster",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s"
          },
          {
            "name": "egress-cluster-tls",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "upstreamHttpProtocolOptions": {},
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s",
            "transportSocket": {
              "name": "cilium.tls_wrapper",
              "typedConfig": {
                "@type": "type.googleapis.com/cilium.UpstreamTlsWrapperContext"
              }
            }
          },
          {
            "name": "egress-cluster",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s"
          },
          {
            "name": "ingress-cluster-tls",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "upstreamHttpProtocolOptions": {},
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s",
            "transportSocket": {
              "name": "cilium.tls_wrapper",
              "typedConfig": {
                "@type": "type.googleapis.com/cilium.UpstreamTlsWrapperContext"
              }
            }
          },
          {
            "name": "xds-grpc-cilium",
            "type": "STATIC",
            "connectTimeout": "2s",
            "loadAssignment": {
              "clusterName": "xds-grpc-cilium",
              "endpoints": [
                {
                  "lbEndpoints": [
                    {
                      "endpoint": {
                        "address": {
                          "pipe": {
                            "path": "/var/run/cilium/envoy/sockets/xds.sock"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "explicitHttpConfig": {
                  "http2ProtocolOptions": {}
                }
              }
            }
          },
          {
            "name": "/envoy-admin",
            "type": "STATIC",
            "connectTimeout": "2s",
            "loadAssignment": {
              "clusterName": "/envoy-admin",
              "endpoints": [
                {
                  "lbEndpoints": [
                    {
                      "endpoint": {
                        "address": {
                          "pipe": {
                            "path": "/var/run/cilium/envoy/sockets/admin.sock"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "dynamicResources": {
        "ldsConfig": {
          "initialFetchTimeout": "30s",
          "apiConfigSource": {
            "apiType": "GRPC",
            "transportApiVersion": "V3",
            "grpcServices": [
              {
                "envoyGrpc": {
                  "clusterName": "xds-grpc-cilium"
                }
              }
            ],
            "setNodeOnFirstMessageOnly": true
          },
          "resourceApiVersion": "V3"
        },
        "cdsConfig": {
          "initialFetchTimeout": "30s",
          "apiConfigSource": {
            "apiType": "GRPC",
            "transportApiVersion": "V3",
            "grpcServices": [
              {
                "envoyGrpc": {
                  "clusterName": "xds-grpc-cilium"
                }
              }
            ],
            "setNodeOnFirstMessageOnly": true
          },
          "resourceApiVersion": "V3"
        }
      },
      "bootstrapExtensions": [
        {
          "name": "envoy.bootstrap.internal_listener",
          "typed_config": {
            "@type": "type.googleapis.com/envoy.extensions.bootstrap.internal_listener.v3.InternalListener"
          }
        }
      ],
      "overload_manager": {
        "resource_monitors": [
          {
            "name": "envoy.resource_monitors.global_downstream_max_connections",
            "typed_config": {
              "@type": "type.googleapis.com/envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig",
              "max_active_downstream_connections": "50000"
            }
          }
        ]
      },
      "admin": {
        "address": {
          "pipe": {
            "path": "/var/run/cilium/envoy/sockets/admin.sock"
          }
        }
      }
    }
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: tipani
    peer-service: "hubble-peer.kube-system.svc.cluster.local.:80"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    disable-client-tls: true
    
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  resourceNames:
  - cilium-config
  verbs:
   # allow patching of the configmap to set annotations
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgppeeringpolicies
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - tlsroutes
  - httproutes
  - grpcroutes
  - referencegrants
  - referencepolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  - grpcroutes/status
  - tlsroutes/status
  verbs:
  - update
  - patch
- apiGroups:
  - multicluster.x-k8s.io
  resources:
  - serviceimports
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-operator/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - update
  - patch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-operator-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/cilium-envoy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cilium-envoy
  namespace: kube-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9964"
  labels:
    k8s-app: cilium-envoy
    app.kubernetes.io/name: cilium-envoy
    app.kubernetes.io/part-of: cilium
    io.cilium/app: proxy
spec:
  clusterIP: None
  type: ClusterIP
  selector:
    k8s-app: cilium-envoy
  ports:
  - name: envoy-metrics
    port: 9964
    protocol: TCP
    targetPort: envoy-metrics
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: LoadBalancer
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
  loadBalancerIP: 10.111.0.10
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  annotations:
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: grpc
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 80
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: envoy-sockets
          mountPath: /var/run/cilium/envoy/sockets
          readOnly: false
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          privileged: true
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      hostAliases:
      - ip: 10.171.0.10
        hostnames: [ "everest.mesh.zerolab.link" ]
      - ip: 10.111.0.10
        hostnames: [ "tipani.mesh.zerolab.link" ]
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host or apply sysctlfix
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
      # Sharing socket with Cilium Envoy on the same node by using a host path
      - name: envoy-sockets
        hostPath:
          path: "/var/run/cilium/envoy/sockets"
          type: DirectoryOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
          # note: we configure the volume for the kvstoremesh-specific certificate
          # regardless of whether KVStoreMesh is enabled or not, so that it can be
          # automatically mounted in case KVStoreMesh gets subsequently enabled,
          # without requiring an agent restart.
          - secret:
              name: clustermesh-apiserver-local-cert
              optional: true
              items:
              - key: tls.key
                path: local-etcd-client.key
              - key: tls.crt
                path: local-etcd-client.crt
              - key: ca.crt
                path: local-etcd-client-ca.crt
---
# Source: cilium/templates/cilium-envoy/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium-envoy
  namespace: kube-system
  labels:
    k8s-app: cilium-envoy
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-envoy
    name: cilium-envoy
spec:
  selector:
    matchLabels:
      k8s-app: cilium-envoy
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-envoy: "unconfined"
      labels:
        k8s-app: cilium-envoy
        name: cilium-envoy
        app.kubernetes.io/name: cilium-envoy
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-envoy
        image: "quay.io/cilium/cilium-envoy:v1.30.8-1733837904-eaae5aca0fb988583e5617170a65ac5aa51c0aa8@sha256:709c08ade3d17d52da4ca2af33f431360ec26268d288d9a6cd1d98acc9a1dced"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/cilium-envoy-starter
        args:
        - '--'
        - '-c /var/run/cilium/envoy/bootstrap-config.json'
        - '--base-id 0'
        - '--log-level info'
        - '--log-format [%Y-%m-%d %T.%e][%t][%l][%n] [%g:%#] %v'
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        ports:
        - name: envoy-metrics
          containerPort: 9964
          hostPort: 9964
          protocol: TCP
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_ADMIN
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: envoy-sockets
          mountPath: /var/run/cilium/envoy/sockets
          readOnly: false
        - name: envoy-artifacts
          mountPath: /var/run/cilium/envoy/artifacts
          readOnly: true
        - name: envoy-config
          mountPath: /var/run/cilium/envoy/
          readOnly: true
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: HostToContainer
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium-envoy"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cilium.io/no-schedule
                operator: NotIn
                values:
                - "true"
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium-envoy
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
      - name: envoy-sockets
        hostPath:
          path: "/var/run/cilium/envoy/sockets"
          type: DirectoryOrCreate
      - name: envoy-artifacts
        hostPath:
          path: "/var/run/cilium/envoy/artifacts"
          type: DirectoryOrCreate
      - name: envoy-config
        configMap:
          name: cilium-envoy-config
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          items:
            - key: bootstrap-config.json
              path: bootstrap-config.json
        # To keep state between restarts / upgrades
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # ensure pods roll when configmap updates
        cilium.io/cilium-configmap-checksum: "6e90afa6fd16b236becace0c5b9ec47dec20baa59e257f103815045cc4f0bb36"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.16.5@sha256:f7884848483bbcd7b1e0ccfd34ba4546f258b460cb4b7e2f06a1bcc96ef88039"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt=etcd.config=/var/lib/cilium/etcd-config.yaml
        - --kvstore-opt=etcd.qps=20
        - --kvstore-opt=etcd.bootstrapQps=10000
        - --max-connected-clusters=255
        - --health-port=9880
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        readinessProbe:
          httpGet:
            path: /readyz
            port: apiserv-health
        ports:
        - name: apiserv-health
          containerPort: 9880
          protocol: TCP
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir:
          medium: ""
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  k8s-app: clustermesh-apiserver
              topologyKey: kubernetes.io/hostname
            weight: 100
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.16.5@sha256:6cfae1d1afa566ba941f03d4d7e141feddd05260e5cd0a1509aba1890a45ef00"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          # livenessProbe will kill the pod, we should be very conservative
          # here on failures since killing the pod should be a last resort, and
          # we should provide enough time for relay to retry before killing it.
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 10
            # Give relay time to establish connections and make a few retries
            # before starting livenessProbes.
            initialDelaySeconds: 10
            # 10 second * 12 failures = 2 minutes of failure.
            # If relay cannot become healthy after 2 minutes, then killing it
            # might resolve whatever issue is occurring.
            #
            # 10 seconds is a reasonable retry period so we can see if it's
            # failing regularly or only sporadically.
            periodSeconds: 10
            failureThreshold: 12
          startupProbe:
            grpc:
              port: 4222
            # Give relay time to get it's certs and establish connections and
            # make a few retries before starting startupProbes.
            initialDelaySeconds: 10
            # 20 * 3 seconds = 1 minute of failure before we consider startup as failed.
            failureThreshold: 20
            # Retry more frequently at startup so that it can be considered started more quickly.
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
        
      restartPolicy: Always
      priorityClassName: 
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
