---
# Source: cilium/templates/cilium-secrets-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: "cilium-secrets"
---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
automountServiceAccountToken: false
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5CanovSU84Q3NKMnNINWUweGxXMW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbWRBVkp2eUttbHJZNVA3N1NQV0R6Nk1mRzg3dUd2V1FJTk9ubjBrZnUybFV3MVQKYU5SVEw1NkxOMy96WmxsNEh2WmkydEJkSFhnRTRhcEFhdjVqcnBhcnI1RkdvOUVZUmxJUWNaYlI0RE5OK3lkUQpCUjlGUit0ZDBwVnNwbkh5MWkzbDVuSWRIbTBzVmZCQW1EaWZSRGtlTUFaS3d1L3F2SnRtNURRM28rU29EZTVJCnlyUGxBSXNiRlRnQU5iK3lQV3U2eStQbFNKdVlRUXVSQkVDM3UvVHZmdmNsbVJtR3lGQy9BU2s3bHVrVkh5ckUKR3J2OFZzTmZ2M0o3U1R6dGsvZWNNWHM3Y3NjK1NLc2FLR0RJUWNhZkJQUFF1MExReUtmZDl2MDZFYTg3WGprbQpVZW5RSEs5NHhycHlmbWdXSzRRTXByUjBRWFNrdEF5OS94NkZpd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ01GaGdDWVZmdEZwOVdEZ0k2ek5KcElDYmJ3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2c5N3hvQ1NmVE1sZWYyMXRKaEdnb0g1YmczaXBvalQ0WmVQUTA2NEsrK25LMHpLR05UOEJvClFLOEVSMW05eExnMnRaQUZQMlZQY3dVN1d4bWRyc0FCby9Mc1pSZ1dtbDYxZG5zS2puSUVGQnRQK0N2SUZiSUUKM29jZCtmWHY1VWxUYXRYR09ZbFZsWTMvK0VOaUp2bHMwOTUrbEJob2lnN0dzVktIblF6OFRkQ21zczRDcmNRVwpScFRDSXk0cXZaSW02SW5wenJ4T1MyS05FaFEyYXJNSHR6RmxTd3dMRzZMSTFETlpESjliSUpaZEF4NVE3UkJ0CnVyK0owOERtSTRQMDdkb2hqYjE0S3owQzZNRmxYb0R0UUNnY0MwcWJmYmhiV0lhd1RSb0NpOElvQmpZWDNKc1oKbXd0ODdOZWZUaWZXZlJkNGdQSmprVEhJTys0SzFLak8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBM21kQVZKdnlLbWxyWTVQNzdTUFdEejZNZkc4N3VHdldRSU5Pbm4wa2Z1MmxVdzFUCmFOUlRMNTZMTjMvelpsbDRIdlppMnRCZEhYZ0U0YXBBYXY1anJwYXJyNUZHbzlFWVJsSVFjWmJSNEROTit5ZFEKQlI5RlIrdGQwcFZzcG5IeTFpM2w1bklkSG0wc1ZmQkFtRGlmUkRrZU1BWkt3dS9xdkp0bTVEUTNvK1NvRGU1SQp5clBsQUlzYkZUZ0FOYit5UFd1NnkrUGxTSnVZUVF1UkJFQzN1L1R2ZnZjbG1SbUd5RkMvQVNrN2x1a1ZIeXJFCkdydjhWc05mdjNKN1NUenRrL2VjTVhzN2NzYytTS3NhS0dESVFjYWZCUFBRdTBMUXlLZmQ5djA2RWE4N1hqa20KVWVuUUhLOTR4cnB5Zm1nV0s0UU1wclIwUVhTa3RBeTkveDZGaXdJREFRQUJBb0lCQVFDSDhUN2VPTkJHWWxlMAo3MUN2UEJkdERBT2RUL1NHSHN4QWRNS0tsOTNHQkFicEJCMDIxNG5kY3FDUUZSSzNQZnJ4bWhNRXd4WVhuRFFICnFDUm1BZ2IyUWJ6QnZTQWJwQVNkZnkzejhJZHE3cEU4OG1PMExkQVFUT3IxZkVhRVd1UmZUSURaWW1rd0h2VloKdGxnVmM0N09pY2RNL1p1WEdrVTJjaHJyWkl1YURsYzIxRktDb2VvNjNGWG5jbXh2bHdCN0x4dDhXTDdIb3MzQwpDSzBqclg0elp4MUlKNkFMWi9wMEhpOUNzdGhWbXpWUnJiQVdWVjlrdnEzNTkzN3FKVCsyditTejdnWXJvbzFlCmVCTExzL1p3aVpmaVpmQVdjK3dQUlJhQXhWUG4vazlFc1Y1OGdlQTFzM3BFUjBFRnk1cVFpUE04OWdyS0ovbWQKdk5wYlhhWEpBb0dCQVBtaFhJQ0VmZkZKQVRYeE5qQVhJcG1mK3lnTkoraXQ2UldrVzdMZ0tGL0hObHR2NWthZQpDSTZhcXR3cjVOQ2ptVkpwaFRyMkNFUUlmaThqcnZyNUxuckRhSE1BTEgvV3FabTdiQ0hBczRSVHJKQmhwclFaCnh0Zk9nRmdIT2NWSlMyZVNydW1qS0V0OWFMUWZ0bTJsMzdnblpvaFd4RUJvSngzQ2pDbitBSUpWQW9HQkFPUVUKQ1pQdDZuWUhVS0Z5V25uK1pWNnhYa0RwTGRXQkd4QlpnYW1zRURQb1VCRno5ZndPd1doZTRIdzJ4OFQ0dUkyKwp4YmE0aHAzMDUyM2RSdDNhbFhndEo1NHhQdEhXb3RRbUNyR1pUcnd0cGtIZFl1TkhmNS9zWE5Kd1pPQzBhV0VLCkhtb0Vwam5JN1FHaUFJMm1CaU5KS3lZK1d5VGNsczh0aUVXVDdZaGZBb0dCQUxrM1lwendzVWwvczJoRXFzSVAKeUZwWCsxQUNRdVEvZFR2YmtUWXRYNGVCRmZIT0d2dTJjZjdzLzIwUkhGczVwNThnTC94SlpHU21NSW5sWGdWVgpNWWxneDNUY1lpZ1FMQkttbjFxRDBpNlNydTBKcDFqbDcwVmNNSm9mOGx0UlFLTitrRTFHQTdYUFBRcTRwUERDCkxEWkU5YXlmUkVuTmZZaDFPdTVGU2pkcEFvR0FJV04xaTN4V3lIU0ZyenpJVmZlUjYyelh1WFRwU3NvZHBpVVUKUUR4NkdyODFpWGlLV0IzbzNsaVZVRm5Nb044d1ZUL0tQZGVCalhvZXJ3eW5wUzZzbHUwMVVZa3dBeFFDdmovYgpiT2hlaUZtK2J3SHp5Z1hiZnhQZytzV05Ydi9LTlhSL3cxRnU3Q0tuMzRkUndXcStsMGZNMDBwcG1WblprZmErCmJrRWJrczBDZ1lBTmw1RmxwdEFvbDVrWmJ0VVhXRXIxa0ZhL3BkUGx3UDRucjRTNkJXTUJEZXMyOHlLcCtNdFEKUTQ5SzV6V3dzR0VTaHQ2dzh4alAyZnhSdG5CdUZJTEJDSTB1Y1k0SDJUL0ZPbmhkMmZpaUJkeFN5eUZJMTVVeQpxMGJqR2tIOU1EenR5T2h1MHRVbVFZRHUxVXYyb202a3JZSWQ4VHZDYmJ2NGM2THlmMXcyREE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5CanovSU84Q3NKMnNINWUweGxXMW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbWRBVkp2eUttbHJZNVA3N1NQV0R6Nk1mRzg3dUd2V1FJTk9ubjBrZnUybFV3MVQKYU5SVEw1NkxOMy96WmxsNEh2WmkydEJkSFhnRTRhcEFhdjVqcnBhcnI1RkdvOUVZUmxJUWNaYlI0RE5OK3lkUQpCUjlGUit0ZDBwVnNwbkh5MWkzbDVuSWRIbTBzVmZCQW1EaWZSRGtlTUFaS3d1L3F2SnRtNURRM28rU29EZTVJCnlyUGxBSXNiRlRnQU5iK3lQV3U2eStQbFNKdVlRUXVSQkVDM3UvVHZmdmNsbVJtR3lGQy9BU2s3bHVrVkh5ckUKR3J2OFZzTmZ2M0o3U1R6dGsvZWNNWHM3Y3NjK1NLc2FLR0RJUWNhZkJQUFF1MExReUtmZDl2MDZFYTg3WGprbQpVZW5RSEs5NHhycHlmbWdXSzRRTXByUjBRWFNrdEF5OS94NkZpd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ01GaGdDWVZmdEZwOVdEZ0k2ek5KcElDYmJ3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2c5N3hvQ1NmVE1sZWYyMXRKaEdnb0g1YmczaXBvalQ0WmVQUTA2NEsrK25LMHpLR05UOEJvClFLOEVSMW05eExnMnRaQUZQMlZQY3dVN1d4bWRyc0FCby9Mc1pSZ1dtbDYxZG5zS2puSUVGQnRQK0N2SUZiSUUKM29jZCtmWHY1VWxUYXRYR09ZbFZsWTMvK0VOaUp2bHMwOTUrbEJob2lnN0dzVktIblF6OFRkQ21zczRDcmNRVwpScFRDSXk0cXZaSW02SW5wenJ4T1MyS05FaFEyYXJNSHR6RmxTd3dMRzZMSTFETlpESjliSUpaZEF4NVE3UkJ0CnVyK0owOERtSTRQMDdkb2hqYjE0S3owQzZNRmxYb0R0UUNnY0MwcWJmYmhiV0lhd1RSb0NpOElvQmpZWDNKc1oKbXd0ODdOZWZUaWZXZlJkNGdQSmprVEhJTys0SzFLak8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lSQUptTDBoNHhub1Joc2xwamltQVEvZEl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0Z6RVZNQk1HQTFVRUF4TU1ZV1J0YVc0dGRHbHdZVzVwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBeXVjSWtHYTlqZ0FKemNaYzZZTG1Xd29PL00xa3kxb1FmUC8xekROSDYvazIKQ0NrWlZuVlRaYm52NzA0Ymk1ejhCcXNBWTFhVzhVSXI2SkhvUW1XZmZxcGxFelViUDN2QlQvS1VIRnJVSjBrYgpTWUFEZEtiT2RRaU5tNWZabjdpNmV4OXlKeW1nUmdIZEJzWHpzaTVOSUNNbGhGSGhYZGY1ZWJObnVrNlhwT2RVCnRvdkZTU1pCUFp5VXNlMWp1RFhHb0RkUHJVTUE4YnpGdlBtRnJEUXhwQXMyYmo0YnNtUFR6c1dUZ1d4Y1E5MEwKS3Z1WXFRcEhOSjBRUGZoRWVsU294eC9EWkd2SjEvTThPTGxPRGhhWWhDOGkvbExkVHRRb1Y3YkNZNDQyK0hNaQpvbEFpREJ3a21lUFVlYzNhY3RBN3hPRGUybE1OVGVNR01ValpxYWwxT1FJREFRQUJvMkF3WGpBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIKL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVSXdXR0FKaFYrMFduMVlPQWpyTTBta2dKdHZBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR0Z0aHE2M3VnSDdrdE4rSEIzbDdKdHlUTXhkZDkvbmRCa2RmYndqcklDUWdrR1A4R0R4CmFrQTBPcWllVE41MXd5c2NLbHBMUmhmb2pEbG1GWEt6Mm9BMXFKeWIwVG4yNUZyaVRjZEw3eG5KK2FRY25hMEcKeEJjczhiZ0FGMUdsN1I1bStKYTYrLzFEaG5XRE1jUTI4MUw2TS9EdW4yRGZLemlmUjVjY0drVlI3QTkzVkdvVApzN0taVHMvaUJDTkdYaytoNEg5dmFpMFJreG85V21QNjZ1aWt0NGw5RHFyRkFpbFBVUXpac0tNa0lpVGd0VzhZCkxaakZLbVVjWU51WHoweDV0MlFSTWhKRHdDS3BuUmF2YWcrbGhhd1N5ZjNhRmhkOGlMajN3K1hTMzhYMEZiTDgKVmZ4bExWOVBTRE5JbU0yWVEzYUh4WmJ3RXRnT2c5NlZTQ2M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeXVjSWtHYTlqZ0FKemNaYzZZTG1Xd29PL00xa3kxb1FmUC8xekROSDYvazJDQ2taClZuVlRaYm52NzA0Ymk1ejhCcXNBWTFhVzhVSXI2SkhvUW1XZmZxcGxFelViUDN2QlQvS1VIRnJVSjBrYlNZQUQKZEtiT2RRaU5tNWZabjdpNmV4OXlKeW1nUmdIZEJzWHpzaTVOSUNNbGhGSGhYZGY1ZWJObnVrNlhwT2RVdG92RgpTU1pCUFp5VXNlMWp1RFhHb0RkUHJVTUE4YnpGdlBtRnJEUXhwQXMyYmo0YnNtUFR6c1dUZ1d4Y1E5MExLdnVZCnFRcEhOSjBRUGZoRWVsU294eC9EWkd2SjEvTThPTGxPRGhhWWhDOGkvbExkVHRRb1Y3YkNZNDQyK0hNaW9sQWkKREJ3a21lUFVlYzNhY3RBN3hPRGUybE1OVGVNR01ValpxYWwxT1FJREFRQUJBb0lCQVFDWUFSYklYeis0aHN6UgpiTDZrYlYwM2JNU25uUlBheUFFOE0rRW5kbTkyRjcvand5NXBPQUlmWG5taWRJaHNRbElJaU1rRW9wVDM3dFBJCktxNnVOMFdTZGdLOHJmZFl5dFNhbVNkZVNxbFBPUlNKTHE3b0VDTHhTRlFWOFYrbXFaU0NzcDhwT2FVSmJWSHgKUmhENE5ubXZEc1dIYUhRR2dzc3g0alplTzR5ZGl4N0pzT2hWTSt3YUZjVklZSGdiaC9hbEhOQ2JYdzUyUmJpTAovY0d6WHQrM0RPcDRVS0NPU2hXcGsxYVE4SGpZT0g1L000bDFCVnZLenhTeHVEbFNraGdsWHRtUTgyRkgzdmw3CmRpUDVLRHk2UTlrK3phTTdJRWovSTJ0blBDdHFpWFJFRVpVYVF3SkFKMnI0K1ZLajMycHphcE43V01PRlozUXIKNDZMM3BwMEZBb0dCQU9aeEN3L0NTM0NoSi9Zby9YZFlxMkJRQjJWeXNrOU5zWlBBK2VEV3N4dlU3TkZPdEhvcgo1L01zVmtnMmsxWVBwNlp0em9UVzhiZDQvYW5GbE5lSndyN21nZ2ZSNUFVUE1nRHQ1aWdaOWxxT0pNWUF5V1E1CmZQYjh4MkNxQ0hvQjdVQXg4dTVTVWtOK0ltVnZudjh5ZXQ4SzZtS3IrNHZUZFJLcmJ1LzFDZVJMQW9HQkFPRm8KRWE4R0xaMUJ2Q0tINHA2VlFiRkFPQSthV3ovakJQM0lHRjcrcVhGQmFrdUJPWHdTaUhta0RSYjQwczlnNmI5eQpPNUJ0Qzl4WUF3a0I0WlpiWC9QeGkrdmpUYVVvc2JVS2MrQy81NnMrQWpYNWZjMng1SzhPWU9XRkVmTHRDZ0hpCkFmVmNJWkdMYWR4enExakNzVXYydDlwZ0dCalM1S2pDcE9xM01qSUxBb0dBTEU3RityUzMvcUx0NVJYQ2pvVDkKQnBxOG9WUHBWdmd3VWFHRUtpZjk3amNGaGNVbFRHeE92K0hoZ1NjRk0wSDFVVG5Cd0tiM2VQaUpoWEFaQzB4UQpwcFg1b0hsSjUzTWhnUzQ4MTY4T1FDRWVqdmV0d1ZpUVg0a0E2T1FvbHhUeHdpc1ljNXhlZHQyMHpWNGw2eG1RCnFId1h6dnNVZGJFbHpINHI2WFZxL25zQ2dZQWtOYk9oaWp5SnBxV3labUhoVjlqVndKdEE1bXNDT0ZYMDdzLzcKY3EyRnBCeVBSSk1YZTJLeEo4bHloMFpXU2h0Q3hmY0xuSGpyVExnd0dqMURDaXEvNVcyMDF5OEIrU2VURGJyUAp3QVJYWGY2ODdQZG9zOHNvMUFaODJJT3BvcXFZNHRXdHRMOHZ3bFdmTkhXeUxKU092M09KZ1NaZDFvTWxHUitsCkZRamJRUUtCZ0R4WjJMWmljdVEvL1liNjV4N0RrQ2duN04zTTRUbWZha2dOTENpeUlqYjdob2cyYXQ3S002Rm4KbVozeVhXT2d4dXpEVXpXY2t5TXRFM1NCNGFjSUI1Q1M3Q0F2Q2w2K01DT0x2MlAvcmp6Vk1SaWoyc3dOMmxxZApYUUt6N1luYWNsakN3UktPUmFUT0hHNmtMcVJPRDkxZFlkbXFMZXp6WlQxa1RKOExvcEhlCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/local-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-local-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5CanovSU84Q3NKMnNINWUweGxXMW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbWRBVkp2eUttbHJZNVA3N1NQV0R6Nk1mRzg3dUd2V1FJTk9ubjBrZnUybFV3MVQKYU5SVEw1NkxOMy96WmxsNEh2WmkydEJkSFhnRTRhcEFhdjVqcnBhcnI1RkdvOUVZUmxJUWNaYlI0RE5OK3lkUQpCUjlGUit0ZDBwVnNwbkh5MWkzbDVuSWRIbTBzVmZCQW1EaWZSRGtlTUFaS3d1L3F2SnRtNURRM28rU29EZTVJCnlyUGxBSXNiRlRnQU5iK3lQV3U2eStQbFNKdVlRUXVSQkVDM3UvVHZmdmNsbVJtR3lGQy9BU2s3bHVrVkh5ckUKR3J2OFZzTmZ2M0o3U1R6dGsvZWNNWHM3Y3NjK1NLc2FLR0RJUWNhZkJQUFF1MExReUtmZDl2MDZFYTg3WGprbQpVZW5RSEs5NHhycHlmbWdXSzRRTXByUjBRWFNrdEF5OS94NkZpd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ01GaGdDWVZmdEZwOVdEZ0k2ek5KcElDYmJ3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2c5N3hvQ1NmVE1sZWYyMXRKaEdnb0g1YmczaXBvalQ0WmVQUTA2NEsrK25LMHpLR05UOEJvClFLOEVSMW05eExnMnRaQUZQMlZQY3dVN1d4bWRyc0FCby9Mc1pSZ1dtbDYxZG5zS2puSUVGQnRQK0N2SUZiSUUKM29jZCtmWHY1VWxUYXRYR09ZbFZsWTMvK0VOaUp2bHMwOTUrbEJob2lnN0dzVktIblF6OFRkQ21zczRDcmNRVwpScFRDSXk0cXZaSW02SW5wenJ4T1MyS05FaFEyYXJNSHR6RmxTd3dMRzZMSTFETlpESjliSUpaZEF4NVE3UkJ0CnVyK0owOERtSTRQMDdkb2hqYjE0S3owQzZNRmxYb0R0UUNnY0MwcWJmYmhiV0lhd1RSb0NpOElvQmpZWDNKc1oKbXd0ODdOZWZUaWZXZlJkNGdQSmprVEhJTys0SzFLak8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lSQUtnWFB6MmJtZlN2aEU2MVZnamVYV2d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0Z6RVZNQk1HQTFVRUF4TU1iRzlqWVd3dGRHbHdZVzVwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBbVVDMjErdmREa01wRi9Edjg4MENpNTJ6Y0hqcjh6UVBMbC9mempjcFNoMmwKa09pd3ZsV1JvZ3NnS0JjdmlMUXZPUXBjNzFPMXpsTHZhMGUwb3dSdnNjU3lxQVRnc2o4ZU02eUpEVzVNSXFlRgp6Y3puLzRqSlo1MnJldzdtelZnMFhQUi9jb2ZuRDRRWFJKS2ZiSzlXNzhLUERhTE8wZzkwRm1IaFg1bDBwVU9FCnlhb1BXb3ZaMDZTaUM0RDJYRHFLVk9vOEdIdU5IRGhLVkdZK1JaUnFFenNCTFd4ZHJ5OU9WQld5aFMrSitIVVkKcUQzM1ZLMXFJMEFYcUFnVlM5WXBmS0h0TWgrU3NZNHQ1SkhOTU42M0UzUmI0U2hrZU0yQ1lkNVViRWd0MElXaAowRXFpVzBJN0MzYlRWeCs4Y1FVSEEyUGk4ckRzNzdEZ2tDQ1g5RmR6SHdJREFRQUJvMkF3WGpBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIKL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVSXdXR0FKaFYrMFduMVlPQWpyTTBta2dKdHZBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQ0RudmluQ2NiSE1xbjJXWTF2VjJtUDVzOTN5SUdCbFVqY2RZTnNxQzJUR3liazRrN1QwClNQTjZMd3grMmppNzgwaWNuSThTMFlmazNWR2JOcTRNTkZ2dFhURWNXQkM1NEVkT2pXUUovVHRVa0R1SGpCNSsKeVZ1VTV4RHNKY1ZyeksrcVRlWnRHWTczUG8yNHNHa2tsRjMyUFdCWW9Ba2ZxaXBTeEd3aHBidnpEYkpvNmJzVwpmUTFVQ1JWYlM3cXNFaEs4Mno1YWtSWU9mdkpra1pEdmMyeGp2UHpaTS81dEZpMElJa2ZqZGdHUDMrazdFbzVvClpJMUxHSlR3OU5lYU1LQVRYQVhPQkoyODlCUzN6MTc0MTYvSnhTTmtnd1ZBWk5CM1Uxd0dncXBEUk96UlQ3cGUKcDFHSXkxL3JrUFY3dlZvcGRldW9ZZWJkbWVCaWFES1FlM0k9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBbVVDMjErdmREa01wRi9Edjg4MENpNTJ6Y0hqcjh6UVBMbC9mempjcFNoMmxrT2l3CnZsV1JvZ3NnS0JjdmlMUXZPUXBjNzFPMXpsTHZhMGUwb3dSdnNjU3lxQVRnc2o4ZU02eUpEVzVNSXFlRnpjem4KLzRqSlo1MnJldzdtelZnMFhQUi9jb2ZuRDRRWFJKS2ZiSzlXNzhLUERhTE8wZzkwRm1IaFg1bDBwVU9FeWFvUApXb3ZaMDZTaUM0RDJYRHFLVk9vOEdIdU5IRGhLVkdZK1JaUnFFenNCTFd4ZHJ5OU9WQld5aFMrSitIVVlxRDMzClZLMXFJMEFYcUFnVlM5WXBmS0h0TWgrU3NZNHQ1SkhOTU42M0UzUmI0U2hrZU0yQ1lkNVViRWd0MElXaDBFcWkKVzBJN0MzYlRWeCs4Y1FVSEEyUGk4ckRzNzdEZ2tDQ1g5RmR6SHdJREFRQUJBb0lCQVFDS1JuV3poTUZEcVIxZQoyS25vbEVXRHE1cklGSkx3TVR5eFh4Z1VmSGpvd3E4c2ZJZGNkT0NlRU9QR3lJUy9GN1MwQnNHcnZ4Ly9OWjJJCmNuNXR5QWJ2b3NhQUMwYWlEWWsybnFwYVQvYXFIZlVBcDYxOFJ2TlNabFRmQjZjQUNHSFdyVlNCQmxaWkRabmcKNlZxbk9kMTdIMVRydk1aWGlsSDRFQURGdlRRZUY5UVNuTGV3YVJqV004REppSFJ2UFlzTjI1bFJobWFvZzhmcQpGejQ1QTYxT1VWVWc4WFk5SjJNeGh5SktjTEZFSVI0QldyUy9qb3diWTZFMklOdEp4ZGUrRGlWT1BxNm1Za1FkCjdwajh3c2t1elM5RXVpRDQwb3ZlK2JNUGJtQ1VuK3AvUnowZnBWVFhKbEZROHdMSXdHZzB5N2xHSHF4S0ZnMk8KRmRpdjg0WmhBb0dCQU13dE1FRnE0NGxFZytZdUUwcFRueWhmZkNRZ05nSDVZYTMyOTdZVnk5clJxS204UG43cwozc1VHaUlWbUVxRVN2dVhBaG9FOUtOZXorQTFlV2p6R0ZQT3R3SHBheUFuOExVbHM5dndIY0lZWDl6V0srZkRkCnRoc3RBeHFRYndTZFk3Z2QrcnY0anR2OENpSzBUcFJ2YWM3YzdWTW43SmttZW42b1MxcWdYZ2MxQW9HQkFNQW0KcFc4TTV4NWs3Rjc4di9ScnVOUktGUkhNem9XTUhjUG95VzIxSW9lWDR1dThsWllhSSt6K2VKcXVPZ0QvME5MTgpKaVRISW0vY2Q2anNSMDM1UFBnMkdhbTN1SVlTV2JySXJBMWt6K0x4dXFKV05jVDNiY0xPektMWkZyQlk3d250ClpBNHZibUNtdnUxalM5Q296cW9nZEZHZGlOM3djV3NWUnA3WnhCZURBb0dCQUpPektOSlo4WW5PUDZCV3VtdXQKUEZobllwVjdtN1luNGlxSG1zQmsyaGhNVExla3pvemc2M0laL002TGZYUjU3QkNtQ21jWmlCOHFPSW5yTkZuOApiUkd1SXF3Z1djOG5WdGRqOVBOeXFrckdzWFZST09ldWExc1RYOGhxclhUb0trZjVuL1UwcEp1c291UmlET3BDCkFvZTd1QTdNdGRKQVRLS3RPZjJ3UHZUMUFvR0JBS2J1N0RxV0V4UXN5YzJiOTRmNUxoSUFhbDJVZUxjOUMzN3YKOWs4QlZvWkdSalpYRi8zWHArNTFCWUljYXZnRFJ3QmNpZzdaa2Vsc3QraGhuWEQ0WHlla21KY0JyYVdNdTdleQpMd2RUMWVkcjZxQ3VGUGlSblNIcFY0OEMydHRKNkNIUHcyVXZmODBvRUNkY1pMbGFibkVPMFA4MnhYbExNcjI5Ck5pVTdPMGpSQW9HQkFKMzlWd2xFZ2xWa0tSY3M5VC9tVytlM1BVTXBLMDdUUXJ2S3VMRE5SWE1TSWtMQy9GVnEKdzBrYithdkV6aExMQ0F6ZUhneFQ3aGY3Q05Yd2N3RHQxNVJTN1J5OCsvZ3BwOHNRbmlRUndNNEUrRmt4cEh4RApxNXM4aWN2R05KbENaSE1reUxGRUZ4dU5Zbks3cmxBRW5OYnFoS2J6bXFVMTlOWUM1V0JrWDNjeAotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5CanovSU84Q3NKMnNINWUweGxXMW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbWRBVkp2eUttbHJZNVA3N1NQV0R6Nk1mRzg3dUd2V1FJTk9ubjBrZnUybFV3MVQKYU5SVEw1NkxOMy96WmxsNEh2WmkydEJkSFhnRTRhcEFhdjVqcnBhcnI1RkdvOUVZUmxJUWNaYlI0RE5OK3lkUQpCUjlGUit0ZDBwVnNwbkh5MWkzbDVuSWRIbTBzVmZCQW1EaWZSRGtlTUFaS3d1L3F2SnRtNURRM28rU29EZTVJCnlyUGxBSXNiRlRnQU5iK3lQV3U2eStQbFNKdVlRUXVSQkVDM3UvVHZmdmNsbVJtR3lGQy9BU2s3bHVrVkh5ckUKR3J2OFZzTmZ2M0o3U1R6dGsvZWNNWHM3Y3NjK1NLc2FLR0RJUWNhZkJQUFF1MExReUtmZDl2MDZFYTg3WGprbQpVZW5RSEs5NHhycHlmbWdXSzRRTXByUjBRWFNrdEF5OS94NkZpd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ01GaGdDWVZmdEZwOVdEZ0k2ek5KcElDYmJ3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2c5N3hvQ1NmVE1sZWYyMXRKaEdnb0g1YmczaXBvalQ0WmVQUTA2NEsrK25LMHpLR05UOEJvClFLOEVSMW05eExnMnRaQUZQMlZQY3dVN1d4bWRyc0FCby9Mc1pSZ1dtbDYxZG5zS2puSUVGQnRQK0N2SUZiSUUKM29jZCtmWHY1VWxUYXRYR09ZbFZsWTMvK0VOaUp2bHMwOTUrbEJob2lnN0dzVktIblF6OFRkQ21zczRDcmNRVwpScFRDSXk0cXZaSW02SW5wenJ4T1MyS05FaFEyYXJNSHR6RmxTd3dMRzZMSTFETlpESjliSUpaZEF4NVE3UkJ0CnVyK0owOERtSTRQMDdkb2hqYjE0S3owQzZNRmxYb0R0UUNnY0MwcWJmYmhiV0lhd1RSb0NpOElvQmpZWDNKc1oKbXd0ODdOZWZUaWZXZlJkNGdQSmprVEhJTys0SzFLak8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUx5bm1MUVlTMGIrLyttQmJVbVBNVHN3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXhndVZNTUNTY2U0bmFJenVSTXkwTkhJMFRoLzQzUFpuS3pTOXMxVWxJc2RLeENGUDdZSXYKUDhYd2x4ajhDM1FzaXNCR3dPK3crMGRva1dFV29LQlBTSkoxQ0I1Qms3K1ZlTnRiQWJQbEVBZHJaZXJsMDdrUwpEMXhnUG9nOUoyS0pUZE9KUUJ5Q2VUendzbDNXaFFGQ1B2WUtwTCtWdGhLVDBSMFp4ME9VSEQyTDl5bmpCK3lxClVHSnVJcVBJSzZCM1lES1RSMjFDL3M2M1QwNnpiVXVyN0ZWdHdMWnZOSWdhTDFteUd2VHQ3TVMyeGM5VlA4YVoKNGplZ3FuSElvMlRLSTNWeENGNGtOSlhCQy9MSUd6Vm1XVlhLQmVCaFIwQXVYTENIU09vUnJxRk1qSlE2SnBzKwpGSC9uRCtISlFwLzlJOVhmTDJGOXlRbjVYU2Y5MkRRQmlRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVUl3V0dBSmhWKzBXbjFZT0Fqck0wbWtnSnR2QXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUxrZzRvOWxkREJuc1h4cFhYN1JQWnpXMHJQeEFyblB6c3lqV2t0TGlhNUdEb2k3cTN2b1VLbHVoYkwyCmlCMUM2ajhva0p0eDR3M0Y3KzRVRCtGenJaNm1wL3hOdkk3OU8ya0QxOHVEdVlQa0Jsdmw2MmF2c2tsTWFxc2wKUVVqRGFPd3dqUFJYdTlaZ01Db3llVmRuN2sxRkcxSjNFcEtwUmNwR1pieEZRczNSNFlYVWY3STJVaC9ZTDR6awpIU0RQSHdnTnFVRTR1V3BrQlhVVmVqM0RMNE1xelQ3b1dHTkxlaWgyUHNZd2kzcXZrMm03N1gwTjhSTzRORTBMCklqRURoRklNMlZwMEI4OWkxbm10Q1F5bWhPMi9veVNaTmF6TDhkVm1kU3BmS2d0T1Z2Yi9rd3ZkSmdqdVpJbE4KbTcyVGFJWjF6MXp6cjFhTUdNV2ZiK2UrQUE4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeGd1Vk1NQ1NjZTRuYUl6dVJNeTBOSEkwVGgvNDNQWm5LelM5czFVbElzZEt4Q0ZQCjdZSXZQOFh3bHhqOEMzUXNpc0JHd08rdyswZG9rV0VXb0tCUFNKSjFDQjVCazcrVmVOdGJBYlBsRUFkclplcmwKMDdrU0QxeGdQb2c5SjJLSlRkT0pRQnlDZVR6d3NsM1doUUZDUHZZS3BMK1Z0aEtUMFIwWngwT1VIRDJMOXluagpCK3lxVUdKdUlxUElLNkIzWURLVFIyMUMvczYzVDA2emJVdXI3RlZ0d0xadk5JZ2FMMW15R3ZUdDdNUzJ4YzlWClA4YVo0amVncW5ISW8yVEtJM1Z4Q0Y0a05KWEJDL0xJR3pWbVdWWEtCZUJoUjBBdVhMQ0hTT29ScnFGTWpKUTYKSnBzK0ZIL25EK0hKUXAvOUk5WGZMMkY5eVFuNVhTZjkyRFFCaVFJREFRQUJBb0lCQURhUUttSnNLK3pIdUlQTgprRGZVVGpIRTVUUkJDc2VWKzRhajJULzNUV3Z2akdITTY4QjhCWmlFYUd5NHJYaGFZWXM0dmtXWnhDRDI0NUJxCk4xbTUwUjRsZTZqbzdSaFB5RmFyMkw3M1dUeTVUcFdkeWdRekVRNjZYS25kenp0eW9uR1d2bEd6aVI3dDgwS3gKSjlFdEw1czVIbVdWZ3lIT3JIc0lrWG1jM01tS2psVUtLc0ZmT3puM2FZNkxJU3NFVmsyNmZEd0RGRGI2L0k4Ugp5NEJLMm5HYk9TbGxCNDRJU0VMYjU0c3RpOTdWVDRSR00vWmx3blhFV2tlcnlxRXlCYnhJNFlZUXRvMUxzZ1pGCjAyZE05RFRtUXZXb2RwcTJ6ZWpjaTQyeVRobUxLQmtsU0RiUDZ3c3hCQ2RYNnVCRThGbUlkcUdvSmRQcnpSSVQKcHRVT1dJRUNnWUVBeGd3QTh5QUVBYlRZMXBEQ1p4WURVWllVM092Y2xlc2VWMVlPemtlOWprRDEvdGY1S0w4Vgo4V1pjVUNQL1JGeUNnWUNHNUx2bllNem9QTVAvTGFCVTZPbnRCMUJ4Q1NJT3FDamQwaDQ4QzVkQm9XdGpQcTRZCksrclJmOEx4czRqdDhsZnVsbm9aTlpTQWFudm5uY0xwaXdKUjlwYTdFeEoyZkx2M0tZVXNNZDBDZ1lFQS8vOTAKdFRjTkhjSXRqZlVzbFlOVXc0akZxckk3UTVBRGxCNjBBWGtzTVFCNWUxSUY5NVhHT3pxVkhISy9XR2NSa252QwpYakJBM3FJelg2VjdpSkVCQ1Vtb3FCMzZGWXJ6L3FoeGZlbDF1MTZ1L0UvcmpQSWVQd1M0dmhzS2RrQ1FnZlR3CmV3SjdiYUdEb3N3UW1MbHkxZmRzVUZtYVpxK0ZTMjd1NnFpMDBaMENnWUVBcGdMNTZOTTFpSmlvQzNSZEFUeWEKbTVGSys4VmFxdkRrQmlIRlYzVWJtRnNyMmV3QWwvOVZ6WDBZZExVNERYM2VoOS9OTTMrdmZKMUhMMmk4UnVyWApRa2FVd2tUVCsrdm9qVjEwVStXMFA2TVRDTlNUNUw3YTFEV0tWNlo2SlJ6ckdQSk10U2EwYXcySWQ3cFZkUkVsCjQ3aVdMRFk5cXNjWE80ZjByNEZLZ3FFQ2dZQnF4RnNqZlJ0T1R2NzYxc2RLY0NTNURHRU1hUnRJZVZiVXZ0MXEKUStSSFo2QkM2NW1yZ2Q3VU13R2ZoTWdERWJHRmUzSThJRG5kNEo0MmhPajVzeWhRZkZVSUVNQ05uWTlYcFY3NApHWmRObHhhNkNvYitHTGkrcGJSN0xRSDNBY1NEUHVuUkU5N3dnVTFLWjN1QWhzKzdKMThZUDlhaWZ3L0R2emVMCnpPTGxEUUtCZ0hCSHhWd2pESzhNeFkwZEFNNE1sK3ZSWTYrVENXYjlhNHVCS3RYUHFKVXRZTW51Lys0VlpjSHkKOW5HbzBRVTNURXVxdGQvd0NrQ0RQeWlnMk9mSkFURy9mdWZUT0Q0dTM3Tko2MWVnNmxWYzRrQ2ZQbDMwR0NacgpickdmUDhyWCs1bm9mdll3UEhQUFVLRGEwYnJOZjBuNGQrOVNrYmpDM2lVRW1qeWo2ZVROCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5CanovSU84Q3NKMnNINWUweGxXMW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbWRBVkp2eUttbHJZNVA3N1NQV0R6Nk1mRzg3dUd2V1FJTk9ubjBrZnUybFV3MVQKYU5SVEw1NkxOMy96WmxsNEh2WmkydEJkSFhnRTRhcEFhdjVqcnBhcnI1RkdvOUVZUmxJUWNaYlI0RE5OK3lkUQpCUjlGUit0ZDBwVnNwbkh5MWkzbDVuSWRIbTBzVmZCQW1EaWZSRGtlTUFaS3d1L3F2SnRtNURRM28rU29EZTVJCnlyUGxBSXNiRlRnQU5iK3lQV3U2eStQbFNKdVlRUXVSQkVDM3UvVHZmdmNsbVJtR3lGQy9BU2s3bHVrVkh5ckUKR3J2OFZzTmZ2M0o3U1R6dGsvZWNNWHM3Y3NjK1NLc2FLR0RJUWNhZkJQUFF1MExReUtmZDl2MDZFYTg3WGprbQpVZW5RSEs5NHhycHlmbWdXSzRRTXByUjBRWFNrdEF5OS94NkZpd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ01GaGdDWVZmdEZwOVdEZ0k2ek5KcElDYmJ3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2c5N3hvQ1NmVE1sZWYyMXRKaEdnb0g1YmczaXBvalQ0WmVQUTA2NEsrK25LMHpLR05UOEJvClFLOEVSMW05eExnMnRaQUZQMlZQY3dVN1d4bWRyc0FCby9Mc1pSZ1dtbDYxZG5zS2puSUVGQnRQK0N2SUZiSUUKM29jZCtmWHY1VWxUYXRYR09ZbFZsWTMvK0VOaUp2bHMwOTUrbEJob2lnN0dzVktIblF6OFRkQ21zczRDcmNRVwpScFRDSXk0cXZaSW02SW5wenJ4T1MyS05FaFEyYXJNSHR6RmxTd3dMRzZMSTFETlpESjliSUpaZEF4NVE3UkJ0CnVyK0owOERtSTRQMDdkb2hqYjE0S3owQzZNRmxYb0R0UUNnY0MwcWJmYmhiV0lhd1RSb0NpOElvQmpZWDNKc1oKbXd0ODdOZWZUaWZXZlJkNGdQSmprVEhJTys0SzFLak8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQUowUlNuR0RBR2xFWjFkMTlNMTRPMFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0tqRW9NQ1lHQTFVRUF4TWZZMngxYzNSbGNtMWxjMmd0WVhCcGMyVnlkbVZ5TG1OcGJHbDFiUzVwCmJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU9KNWJaZHF4eG1HS3huL1ZXdDgKMWwyQjNqMDdxbjZiUExRMG95RXJxRmNxWXM5aHd0NS9MNWdEL0pwU3E2NHJqenBvVGJSdlo3UVZTTkZ5KzNqawpOM0V0VWxmeVVlelgxVU5WdVcwMkJOQWdoNGV2ZjBOZStka0NuQjhTQzQ2Mm5zNDhjQ0JxaWFucGpISmNEdTBJCnkrL1ZlZVhoQWlnQkw5Z3gwN0tRSy9TTE94WGZDSnBmNTBSTWtibWI4cUhpNmNQVGppVlZENjJtNmtFRGNZaWEKdUJoZlhHYkFvZHNsakIrUEp6TEN6ZFBMZ2F1SVhnNnVDM2tsVytURS8rbDRQMU9KbUhFSjAwZHZiTFdaU3pkOQpPMEhwNkVkaktxUDdseVB4enVXREVDNU52ZGFVRTgxSnBvR3k5TDJRYTEvUHZaMmVZNE5sbEVCenhyeXYxNXcxCkJsOENBd0VBQWFPQjNqQ0IyekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUgKQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVUl3V0dBSmhWKzBXbgoxWU9BanJNMG1rZ0p0dkF3ZXdZRFZSMFJCSFF3Y29JZlkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnlMbU5wCmJHbDFiUzVwYjRJUUtpNXRaWE5vTG1OcGJHbDFiUzVwYjRJbFkyeDFjM1JsY20xbGMyZ3RZWEJwYzJWeWRtVnkKTG10MVltVXRjM2x6ZEdWdExuTjJZNGNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBcWdKclZ5VXF3MWhRWlNaSDBqWElhYUcrckd0LzBuTXhOd1dZZnJFQm93aG5iV0RLCnk2UFI0YWsyR1c3c0VnNUkrM1lZN0ZrSTM2VDV4bHQ3RFNDT0lKY3c3SGd2S1UxNmsvd0VhdFdyZVZBSklxd3IKSjJLOG8yekxkM2dOdTAwM3lrVGorOGN3bUJSckY0Z2RoWHhFV0hiWENXU0RLZVdZaHRXWU1XK29vSTV4ZkMwSwp6TjhsMGlMVGlnQVRaOFJwa1M4a2pNdjRWTmozRE9aVGpTQkVhTVB1NW5OaVRGY2lQRVordnozWFVlWVZNTEFUCnB3bGpPZWVwMStYc0J3YitIRHh0L21ERUFhQzdWV0wvdWJSU1krdHBheXpPNmRlSE5JNmFOVUJMRzVqd2hwVmQKdzlFRWdsMVBpNVZpN0VlZGJNdFlrLys2UHltM3gwN1haRFpXd1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNG5sdGwyckhHWVlyR2Y5VmEzeldYWUhlUFR1cWZwczh0RFNqSVN1b1Z5cGl6MkhDCjNuOHZtQVA4bWxLcnJpdVBPbWhOdEc5bnRCVkkwWEw3ZU9RM2NTMVNWL0pSN05mVlExVzViVFlFMENDSGg2OS8KUTE3NTJRS2NIeElManJhZXpqeHdJR3FKcWVtTWNsd083UWpMNzlWNTVlRUNLQUV2MkRIVHNwQXI5SXM3RmQ4SQptbC9uUkV5UnVadnlvZUxwdzlPT0pWVVByYWJxUVFOeGlKcTRHRjljWnNDaDJ5V01INDhuTXNMTjA4dUJxNGhlCkRxNExlU1ZiNU1ULzZYZy9VNG1ZY1FuVFIyOXN0WmxMTjMwN1Flbm9SMk1xby91WEkvSE81WU1RTGsyOTFwUVQKelVtbWdiTDB2WkJyWDgrOW5aNWpnMldVUUhQR3ZLL1huRFVHWHdJREFRQUJBb0lCQVFDUUJNQVlaaUt1ckkrRQpQTWRKVDEzU29OOSsrUTUyN0treHY3ZHRSS0lNckR1aHZYMTZtRTdmME1rMktoUmE4Z0JuR0NVeDlSWnhnb2VJCkNpSzR3Z2d2eEs1MGx2aGFNUGJCbHlZUHVTWmVaQkZMeStLV0tUT2hPUE9uSG9hUy9yY0dWNURHVEhtMnYzbzgKenlYK3ZuVlIwdU50dUNUeTQ2NVZRWHBxTnh4OHFVdHZTZG40Vnhmb0hlUmMrTjA1dXI0akRCcW1Na2U2TDliUQo4dzVMc0lZZnJVR3UrdzFVM2V5VXVvZXRBK2x2UDdaRlQ0VGRKZlNtNkRqbnEvTXM4YjI1RTdaSFV2RTMvc1ZYCnYvOHA5a2JDUzgyeUgvT2JKQ3dkTnRjQWFaZW5aSEwyRHhORjY0MzVyRXdKTzdQTFNURVhZdUxEN0U4UlkvdzAKV0FmMTMrMmhBb0dCQVBGaVFrQkpWN1JxVGJlQXpTcDRGRGJJQkNrUFdjRVdvTW9UT3pQdXg5ZXNPNlVnK2RoOQpSeThyOUhIT01yUEtLRDVKeVR4d3F1Y3BXamFJUXNXVmUwUURZcTdURHp1RllhOXlTWmpQajBSRWZqNTRzamI0Cm04R0RNbkRKVWUvWGJxQ29Ic2R4WFZOVHVTTEZHRXZNaDNobzBPQndnb3Uyd0phbHo3OUIyMFc3QW9HQkFQQXcKRGRraVJKRWIyNlBVYmdLQWx6SDZQNWtRR29ZMjlMay9pUUEwK0JiK0JMTVlHRzZ6dVBVNUpQQ1B0aEtaRXNFNQp3bWtRYTNVRlBjUzU2NlJ4UzVENnI5OWFRVTJvOFZQZFZlVTBxcWxxMTREV0pva2MzZWtIdEU4LzQ2RnRPdVVZCm9JaS9TeDVZY2IwQXB4N1I0Y0tKYkhoTGJlTXVKL1lzdDVPV09zV3RBb0dBVk0wZ1dWVnE2b2N1Sm5tcG1uSDEKS0FtODdHL29LRjI2djBOaVdTeGFLUHJwT1dvTVhISW12L3ZCTlBvcjlkM2ZwWUptb0VVMHhXRlJ3RGErdm90MQpjcjk5dTgyS1hHN1Brc09qOTN0ejZaZm1naXdFOENzSERVVDZRNFYyczd3THNZVmV5dEtZNXQxUy9WUWc1UUJGCjE1ZDdTbDQ4ZnJrRmorZFF4UEJ1Q0dFQ2dZRUE3dmlRdnFuR21LMmo4VE9wSkpvMlZFWk13b2h3SzN0QUw1UFUKUmoxdFhNcnRlQmNRTUF4bWlLMkxZRUZNQU9NRjh2UDV4cmpNZ1VodXRXM1owdW5hS213UlVlTWx1QlBQMEFZVwpzUTZlZ2lOSU9PcFl1dkRhcFVEQ0dGdFRxc2ZYNGhxSGxxYmxJVk1VRHQwNGFZU2Uzd1FGeFFZZlZmb1ZUbXdkClZoMFJhcDBDZ1lCS1pnQmRiZjdiZm92ME4yWk5ITG5DemFYTy9EK3VZalgvY0pSeUdTa1hKNTJZNkgxZnZoSEkKWnBsWXZ2dlM4cVRFdktnVXQ3eC92eEhLUG9CMXVUR1UwcFV6ZTB6S0RkNjlEVUdDd3BCbmE4eTgxNjJFTnVUYQpPcXFmSGpDK2hpN2MwdEFEWEQ0WnlRQUNEVmIyeGdnV01ncGdkbVRnaklab2RwNnNxcFdwd0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  enable-envoy-config: "true"
  envoy-config-retry-interval: "15s"
  enable-gateway-api: "true"
  enable-gateway-api-secrets-sync: "true"
  enable-gateway-api-proxy-protocol: "false"
  enable-gateway-api-app-protocol: "false"
  enable-gateway-api-alpn: "false"
  gateway-api-xff-num-trusted-hops: "0"
  gateway-api-service-externaltrafficpolicy: "Cluster"
  gateway-api-secrets-namespace: "cilium-secrets"
  gateway-api-hostnetwork-enabled: "false"
  gateway-api-hostnetwork-nodelabelselector: ""

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "true"

  bpf-events-drop-enabled: "true"
  bpf-events-policy-verdict-enabled: "true"
  bpf-events-trace-enabled: "true"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: tipani
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "1"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  routing-mode: "native"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-tcx: "true"
  datapath-mode: "veth"
  enable-masquerade-to-route-source: "false"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  direct-routing-skip-unreachable: "false"
  enable-local-redirect-policy: "false"
  ipv4-native-routing-cidr: 10.0.0.0/8
  enable-runtime-device-detection: "true"

  kube-proxy-replacement: "true"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  bpf-lb-sock-terminate-pod-connections: "false"
  nodeport-addresses: ""
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-mode: "dsr"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "false"
  arping-refresh-period: "30s"
  k8s-require-ipv4-pod-cidr: "true"
  k8s-require-ipv6-pod-cidr: "false"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-node-selector-labels: "false"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "true"
  ipam: "kubernetes"
  ipam-cilium-node-update-rate: "15s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "10"
  k8s-client-burst: "20"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  dnsproxy-socket-linger-timeout: "10"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-initial-fetch-timeout: "30"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  envoy-base-id: "0"

  envoy-keep-cap-netbindservice: "false"
  max-connected-clusters: "255"
  clustermesh-enable-endpoint-sync: "false"
  clustermesh-enable-mcs-api: "false"

  nat-map-stats-entries: "32"
  nat-map-stats-interval: "30s"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: tipani
    peer-service: "hubble-peer.kube-system.svc.cluster.local.:80"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    disable-client-tls: true
    
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  resourceNames:
  - cilium-config
  verbs:
   # allow patching of the configmap to set annotations
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgppeeringpolicies
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - tlsroutes
  - httproutes
  - grpcroutes
  - referencegrants
  - referencepolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  - grpcroutes/status
  - tlsroutes/status
  verbs:
  - update
  - patch
- apiGroups:
  - multicluster.x-k8s.io
  resources:
  - serviceimports
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-operator/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - update
  - patch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-operator-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  annotations:
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: grpc
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 80
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          privileged: true
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host or apply sysctlfix
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
          # note: we configure the volume for the kvstoremesh-specific certificate
          # regardless of whether KVStoreMesh is enabled or not, so that it can be
          # automatically mounted in case KVStoreMesh gets subsequently enabled,
          # without requiring an agent restart.
          - secret:
              name: clustermesh-apiserver-local-cert
              optional: true
              items:
              - key: tls.key
                path: local-etcd-client.key
              - key: tls.crt
                path: local-etcd-client.crt
              - key: ca.crt
                path: local-etcd-client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # ensure pods roll when configmap updates
        cilium.io/cilium-configmap-checksum: "c4b1ee1ddecfbde7b34e0d989ee500a65a63f4ece936af6ae71cf8053864870b"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.16.5@sha256:f7884848483bbcd7b1e0ccfd34ba4546f258b460cb4b7e2f06a1bcc96ef88039"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt=etcd.config=/var/lib/cilium/etcd-config.yaml
        - --kvstore-opt=etcd.qps=20
        - --kvstore-opt=etcd.bootstrapQps=10000
        - --max-connected-clusters=255
        - --health-port=9880
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        readinessProbe:
          httpGet:
            path: /readyz
            port: apiserv-health
        ports:
        - name: apiserv-health
          containerPort: 9880
          protocol: TCP
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: kvstoremesh
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - kvstoremesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt=etcd.config=/var/lib/cilium/etcd-config.yaml
        - --kvstore-opt=etcd.qps=100
        - --kvstore-opt=etcd.bootstrapQps=10000
        - --kvstore-opt=etcd.maxInflight=10
        - --clustermesh-config=/var/lib/cilium/clustermesh
        - --max-connected-clusters=255
        - --health-port=9881
        - --prometheus-serve-addr=:9964
        - --controller-group-metrics=all
        readinessProbe:
          httpGet:
            path: /readyz
            port: kvmesh-health
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
        ports:
        - name: kvmesh-health
          containerPort: 9881
          protocol: TCP
        - name: kvmesh-metrics
          containerPort: 9964
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        - name: kvstoremesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir:
          medium: ""
      - name: kvstoremesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-kvstoremesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of this pod
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  k8s-app: clustermesh-apiserver
              topologyKey: kubernetes.io/hostname
            weight: 100
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.16.5@sha256:6cfae1d1afa566ba941f03d4d7e141feddd05260e5cd0a1509aba1890a45ef00"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          # livenessProbe will kill the pod, we should be very conservative
          # here on failures since killing the pod should be a last resort, and
          # we should provide enough time for relay to retry before killing it.
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 10
            # Give relay time to establish connections and make a few retries
            # before starting livenessProbes.
            initialDelaySeconds: 10
            # 10 second * 12 failures = 2 minutes of failure.
            # If relay cannot become healthy after 2 minutes, then killing it
            # might resolve whatever issue is occurring.
            #
            # 10 seconds is a reasonable retry period so we can see if it's
            # failing regularly or only sporadically.
            periodSeconds: 10
            failureThreshold: 12
          startupProbe:
            grpc:
              port: 4222
            # Give relay time to get it's certs and establish connections and
            # make a few retries before starting startupProbes.
            initialDelaySeconds: 10
            # 20 * 3 seconds = 1 minute of failure before we consider startup as failed.
            failureThreshold: 20
            # Retry more frequently at startup so that it can be considered started more quickly.
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
        
      restartPolicy: Always
      priorityClassName: 
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
