---
# Source: cilium/templates/cilium-secrets-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: "cilium-secrets"
---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-envoy/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-envoy"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
automountServiceAccountToken: false
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZEIrcW56a21xKzczb3ZxQ3gvOFp4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRFd01UVTFNakExV2hjTk1qZ3dNVEV3TVRVMQpNakExV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQy9jaWN3NDlpVlVGbVpDZURvelZyNEYzMFNQem1EbXZMNW5EaTh3N2d0Z1NnRTR0UmIKcXdZMkJmUlJjS2lialIxd3lPeTVTckVab2lZT0lBR0d1Uld0ZzIzaWJBajY0dDhWL2dhczdnSnRSbmFGOHdoVgoxdVdkaExiamZNS1lmdGFsOWRsRVptTEl2Smo2T3lHdGNaQm9vV0FFbnhIYmxLZXpPZmVWenFTUmxJU01pLytGCmRsYXBYVExWV0tyQm9LVUtqZXh3SGhsRktmK0MvRzJKQzJ2enZ2M01iQWIxejI4cUxQdEh4UWh4cno2cnJRelIKdG56aVIwc01YTFNIUlN4d0NacVk1L2MzM1VOdHBzeVhKRDN5OGJtaDR6RDJSTmZaVExLOWxqRkxDSitneFBYaApXbTdaREgrWE15b05VOGNlSnhzVDJDVFplZGFuT0NSUUdMVGpBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVabkJJUXR2azlyREM2eWpDZ2hqS09NUll1dFF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFMVBGMUhtaDgveE0vTTkwVHNZcU1kSFdOTElLT3VaRXRSS1FKSmwweGZGYmFQSld0K2ZSUm0yCmRDazNYN1FUSExYVGRubkxkYXUzZGRWK054VThheG1RUWdGRWpCY0ViUXZSVElkV1YxN2tXd2RMVm90cElqQWoKNTM4a0RiQUtjYTR3Qnk2UkFXdzFYWUd6T1pXeEJmYWVLNlZ0Yjd3MndXUE81L1ByY1JoNWRKdzZGWHYvdDZWcAplWVVoZThtOEFmSG5RUmhZT3FiSlZmWXhhQ1Avais1eVJZR3pjRmtXU0dZdkRwU1dmd0krWlRGWFIzYVFzZHQ0Ci9QZlBhdEthVWxXQWNwTW5HT29kS0JIa1VOZGgzR3FZNkd3MkhDOWF0M1F4TkpDTmdBdGw2c05rWHN1b3VCNUQKRVB3ais4Rm5LQmFLRS9mS2JyVHpReW9EVkQrSllmTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdjNJbk1PUFlsVkJabVFuZzZNMWErQmQ5RWo4NWc1cnkrWnc0dk1PNExZRW9CT0xVClc2c0dOZ1gwVVhDb200MGRjTWpzdVVxeEdhSW1EaUFCaHJrVnJZTnQ0bXdJK3VMZkZmNEdyTzRDYlVaMmhmTUkKVmRibG5ZUzI0M3pDbUg3V3BmWFpSR1ppeUx5WStqc2hyWEdRYUtGZ0JKOFIyNVNuc3puM2xjNmtrWlNFakl2LwpoWFpXcVYweTFWaXF3YUNsQ28zc2NCNFpSU24vZ3Z4dGlRdHI4Nzc5ekd3RzljOXZLaXo3UjhVSWNhOCtxNjBNCjBiWjg0a2RMREZ5MGgwVXNjQW1hbU9mM045MURiYWJNbHlROTh2RzVvZU13OWtUWDJVeXl2Wll4U3dpZm9NVDEKNFZwdTJReC9sek1xRFZQSEhpY2JFOWdrMlhuV3B6Z2tVQmkwNHdJREFRQUJBb0lCQUJycjhwYnRjNGVMeFEzQQpWZUJuQUdQaTZiT25NRzlSV3RtL0hqdHRTbmtic0lUL1lOMkRMMXhwZWZINTVidjZIQ25BRjRuMjl2Q2ozTFlmCnloY243K1IybHYxQU5BTVQ1RXN6YmJ6anUzT2lkUWhoSk1ydGJWeTVUUDZ3akt6bEtVb3RTR0JXQlk0MDkwNDUKQW9OaGRPMUJ4RDdpSDZEQlJ0UHRVdU8rSzJaTlBnSG5ZUHFSSlQyWjBJdENJRVhnMWdDRzdCS1paTGVVM0xHZQo0K2kxc21oK2RxV2pzRzdQbE5NNW1VVXpjMjF0aTc5Si9DRytIYzF5L0hDbTBwMWUxTXlMZkY5QlpyWUlBcTd0CjIvZTUrbWxpU01sUkZtb0pld1o5UHRyeThkSlVFalFYUzZjSmtmYWcxMlAvL1RMYjA2Vkk1N0Z2cDlkMkJsS3gKVFRuWEFBRUNnWUVBMDEyeThwcEZYOGZBOEExRnhCV2ZIQncvUG5Fa3hmMHdLdGlYbjRJVHFvU3VaQld6WGx5SQpqNTFWM2Nrc0hTNEdSdFZjTmVaU1ExbDlRbDRoNWI3bXFYQUU0RnYyTnp0K1ZFeEhEQk1LWVFBNFRZbSswVW9oCktjQnhYdHZNSGZLbHRPVDkvZ29aUmo3T3FYMlZmWlFwSkRNSTdQK0FvU2RTUlhhNi9XamhVd0VDZ1lFQTU5K1cKVGNEbytEL2Izakk0elkrSDN4MkEveENaa1FnbmZWL1ppa0t6Y2w5OExndFN0azZjR3djYk5tcXdQQ0QzWVVJbwpFKzFVUE1URWJRWWpteHhVT3E4ZkpYN0lzZ0JvQm40L2N3Y01CcUh0WEtremZnZXlwb3JaWnNQMktrOVZkU3htCithbzRkdEc0SFJPaUZiby95ZitvZkhWNGx3M0U5a2ZWSjN1TEcrTUNnWUJUc1VCUUs2SFlvU0hXYTRyNmI0MUcKOWpCY3F6UmlhVFNQWXAvMit1eUtrbXJ6R2x5aHVvWWdSNjVlV1cvc1JmTWFUUlZzQ2p6OGlneTlJTVRQVWQzSApyYUZnclVrNjZZWEdIMFhxbEFlQ0RUSStFWkxMRUUwOVdRUUxDWUV6UW9jMnI0MmE3NmkrVmRSQzdJVXE2bVczCi9iVkZFbzUrUVRHa2E3VHk3bnA2QVFLQmdRQzZkbVRLTmgyaXRNZTgwU280cy9tUmhJcGRreDNMTVlHQUl2b3YKWXlBbkUzNHJFTlA4NHc1SjlkYitWYUZQV1R0V0xQdEp1d3FJcTd0QjZUUHM0a1Vody80S0N3Q2RsQklUVnFiegplM0ZDVENreTRLWVY3VjdPNnMyVkJIVUs1UzFWd3RVMFpKeHZnSXJNWnlOcTBaSEdnUjhlcHVESXFEd0J5Ull5Clgva24vUUtCZ0Q4UnhwaUg5K25lNHRmSVJyUUZrMEM5WnhBbGRLdmhINXlJaDVIS0NtUU81WkpHSHR6bUdZeFkKTXl0eEZHcGlBY1N1UEVRbnJwMWlKb0JHV1FDZHk2RElQK0czUklDdlBlaEVXVzNkZFpLQnE5YkZmMDBtaXdmVQpUZnhQZ1I2UXAwMzJYUVlvVzNLWkU4TzM4UE1aMXAreitlZmJPVmdJMWMwdk0rY3c2ckltCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZEIrcW56a21xKzczb3ZxQ3gvOFp4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRFd01UVTFNakExV2hjTk1qZ3dNVEV3TVRVMQpNakExV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQy9jaWN3NDlpVlVGbVpDZURvelZyNEYzMFNQem1EbXZMNW5EaTh3N2d0Z1NnRTR0UmIKcXdZMkJmUlJjS2lialIxd3lPeTVTckVab2lZT0lBR0d1Uld0ZzIzaWJBajY0dDhWL2dhczdnSnRSbmFGOHdoVgoxdVdkaExiamZNS1lmdGFsOWRsRVptTEl2Smo2T3lHdGNaQm9vV0FFbnhIYmxLZXpPZmVWenFTUmxJU01pLytGCmRsYXBYVExWV0tyQm9LVUtqZXh3SGhsRktmK0MvRzJKQzJ2enZ2M01iQWIxejI4cUxQdEh4UWh4cno2cnJRelIKdG56aVIwc01YTFNIUlN4d0NacVk1L2MzM1VOdHBzeVhKRDN5OGJtaDR6RDJSTmZaVExLOWxqRkxDSitneFBYaApXbTdaREgrWE15b05VOGNlSnhzVDJDVFplZGFuT0NSUUdMVGpBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVabkJJUXR2azlyREM2eWpDZ2hqS09NUll1dFF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFMVBGMUhtaDgveE0vTTkwVHNZcU1kSFdOTElLT3VaRXRSS1FKSmwweGZGYmFQSld0K2ZSUm0yCmRDazNYN1FUSExYVGRubkxkYXUzZGRWK054VThheG1RUWdGRWpCY0ViUXZSVElkV1YxN2tXd2RMVm90cElqQWoKNTM4a0RiQUtjYTR3Qnk2UkFXdzFYWUd6T1pXeEJmYWVLNlZ0Yjd3MndXUE81L1ByY1JoNWRKdzZGWHYvdDZWcAplWVVoZThtOEFmSG5RUmhZT3FiSlZmWXhhQ1Avais1eVJZR3pjRmtXU0dZdkRwU1dmd0krWlRGWFIzYVFzZHQ0Ci9QZlBhdEthVWxXQWNwTW5HT29kS0JIa1VOZGgzR3FZNkd3MkhDOWF0M1F4TkpDTmdBdGw2c05rWHN1b3VCNUQKRVB3ais4Rm5LQmFLRS9mS2JyVHpReW9EVkQrSllmTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lRSGdlZlFteGFHZ1BUcXRNcC82d3RkakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRFd01UVTFNakEyV2hjTk1qZ3dNVEV3TVRVMQpNakEyV2pBV01SUXdFZ1lEVlFRREV3dGhaRzFwYmkxdVpYaDFjekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBTkZ3bWhJMGViTUJQUEE1cGJRcTN2MzVZbkZWQVkzVTlNcjRaeWJhU2lhSmNabDQKZlkyU2JRV2Z3V1E2bmF4V1JwUmovaXgrazdyOUlDcXk1bEkwL3NvMjBib0hXalRvTGVZZGt3cytlS04rYW1nTwovMWNiUmhTZTh5NkZEYjNmanUwOFpsV1F0NVBiUGRzRkFNb2E3R2RTajUxd0p1dFhjN1B2ZWlKaWcxazFsbXdwCjd5Y3JIWXdoWENxcTRXMnJUeWV1RmVHRHBwRTVEVkdTWFJPUjRoZDNOcHhkVFFGTzhlNjBkOUprbGtUMmtyUVcKTDVUOU9ja2c2a3Q1U2JLRUVCbEl2c0c2cndVVFcwY202a25SeVo3d0tqeFNZNXNWUkxFZk5MeFNQemJyWmZ0QgpzdlJCbjZPT1ZyZ2FuUDd0ZitQZ29JaElPdWxlN2oxRVFYUHo4anNDQXdFQUFhTmdNRjR3RGdZRFZSMFBBUUgvCkJBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEUKQWpBQU1COEdBMVVkSXdRWU1CYUFGR1p3U0VMYjVQYXd3dXNvd29JWXlqakVXTHJVTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQVpEWFNDMXJwbGY2MXk4Q0J1b2VuYmJ6WDBOS1pZMXY2NUlSL01wWVp3Tm9vNWVKSFlOM24vCnNRRjl5ZGpHU2FIdEF1d0Z2RHpXWjlyaS96YXFxeXpFOTFROUxPZTdvMW9BZm9rRUVxVERubmF5QXVwdlpkUHQKVHNYSG5BZEYxSnZIWmlxbFZzWkJKUzFNbVRCZnFJaG1EL3VJRjhEcno4amFUV2NsUXArMW5mckZwTytjSGFpbgo3YW9RZEE4akxyQXR1dXVTQ1FSb1RjNi9EcVJTZVY3QzRUc3l0b0hXbVo5VjRSM2R6SVZSWWloeHdSSW9yM2Y1ClRoQnVRdlRMalQzVUU3djJtWFJrbWpKcGVaa2RUMjlVZE5oQ3BhNDl1S0dwT2h3b3lzY3drNVhoZGt6SmM1cVcKQ1lQQUxNZVdBdHBJekN5Y3FhYVZsTzd2TjYrcWt6WVUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMFhDYUVqUjVzd0U4OERtbHRDcmUvZmxpY1ZVQmpkVDB5dmhuSnRwS0pvbHhtWGg5CmpaSnRCWi9CWkRxZHJGWkdsR1ArTEg2VHV2MGdLckxtVWpUK3lqYlJ1Z2RhTk9ndDVoMlRDejU0bzM1cWFBNy8KVnh0R0ZKN3pMb1VOdmQrTzdUeG1WWkMzazlzOTJ3VUF5aHJzWjFLUG5YQW02MWR6cys5NkltS0RXVFdXYkNudgpKeXNkakNGY0txcmhiYXRQSjY0VjRZT21rVGtOVVpKZEU1SGlGM2MybkYxTkFVN3g3clIzMG1TV1JQYVN0Qll2CmxQMDV5U0RxUzNsSnNvUVFHVWkrd2JxdkJSTmJSeWJxU2RISm52QXFQRkpqbXhWRXNSODB2RkkvTnV0bCswR3kKOUVHZm80NVd1QnFjL3UxLzQrQ2dpRWc2NlY3dVBVUkJjL1B5T3dJREFRQUJBb0lCQUVoT21jS2pQMGpmcW93OQpPc29pNnUzQUJZNmZESFJOQzE1dnVCMGZ5KzNXRWRRc1Z4eGpheVEvN1dLUEloUjNqTko2V3l3OVh2OTFtSDlsCldFTVZiTW1mZDNURVNRNXZBam1xQ0RRZmswTE95Q200MDhyYzdhcjgzWFE0RjNCd0dFWXJUaUZJWHppNnZuWTUKR2Zhc3FPVmJDWjRQTkVDWDVxZytpMm9Ibk5WVkhPSEVjRXFNakNQMUt4VDBNeU95N1BONmJjdE1VT2tnc1lSNwpKOTY4Mkxpa2VBYXcyUXRka1FmbzBNeDNKVVd4azNvelI5ZzliMFdHT0ZUc2lQTlRhVkhlVzluSVhXSkxpUzJOCkx2RHJHRXU5VWZ5SnFCY0syanBxOUN1L2tqaVFWRnRjb1NCTFh4SzNyeGNJcmRsZXArNVp3OFVwZGNjZzlSRHgKMWluOE9JRUNnWUVBM3FwN3BWeUtHd28vQWpkclR1T0lEcG9pR3JYWW9CVndtaUhPSWo1aVd4VzRxTy8xbERlYgpTODR2cnhBL29wZnhuOWlqcGx2QnFjTGVwS3dqRytjVXd2bzEzUkxWdzJpejdobURnYlk4ek5hNVNyakM3ZkVZCkQxdFVxT2dseFc0dEFoOWJuaUxxSDA5NTVPT3BZTzFoVm9nUHNkQmNDM3U2cUxsUDByRkwxVnNDZ1lFQThNczgKNVAzVUdSQUdFZzZYa3l5aWRzL3lZb1VCWmJCM3FGK3FCWXNGMmVicWJGUDhBdlo2TUpsS1h3V2Z5TDFOY0MyZwpjdzEvMFJKTm5GSzZiUkVEcTlUSmRFVnJOWk8zMStJd2o4UzdQVEpxY29NdUEwUnhYdEp3cUdhcy9EY1pLcUpYCnJDdnJYWUJzZnVEcDFobzdOQmlSRXBNZE8rUGVlSC9UZnNMUGpLRUNnWUJxVXNIai9rSThFekp2SG9OeEVoamYKMEIzRTMxeG5aSlYySS9wSVE3MjNmTEhHaVg2Y25jamI4OEsxTjI4TGRyNTc4M2lCY1lNU1N1a0JmT2p1NC9MMwovMzVFNkQrR3BiSjFXVjJBVE1MUGxTQzVXMnhKTGp5czZKR09iZnZMUUliaFlwUGUrUkVPam1iSU15V29FUEhQCjNmeVFqY3ZGOS9qenBEbEhoRDJQelFLQmdFRDRaWWJYNGltZEJEWk5ENkxiVVQ3RG52L3NLVk5aeVA5NlNITFUKYnhDN1dKZEFGZWhxdnM5c0hRQUVrWGRsZElhSEdSclNFcUhEMFlNVFkwL1lYbWczc3QrWGQzVHVWWlYvWjJEegpVUjRUQTF2QWYyTE1UZGFxNjFEVTIybjJKK2swQW5ubkk4dUh3ajU5eXpwRXU2S3oyampyenVDQS9GOEJCbnpXCmJZL2hBb0dCQU1kd3FzV2YwSDMxb3JQZDJJUnhaa0M2REtHUDRmL2lYR0gwOGNkMFQ2ZjZpSllHN00wbVc2bEsKU0hza01tSmNDL1AweXUyQ0hMS1VoTHJLdWsrclpOd1lhZ3hDZFBma3pXYU1PRklKVVB2M050STZ5K3l3SmZ2bApzN01NY0JiL0RyYVZGeXZIZmg4bjl1UFh0WHNYYjYyODh6blJ0MUdLUFRPUDMzcDRsdnFiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZEIrcW56a21xKzczb3ZxQ3gvOFp4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRFd01UVTFNakExV2hjTk1qZ3dNVEV3TVRVMQpNakExV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQy9jaWN3NDlpVlVGbVpDZURvelZyNEYzMFNQem1EbXZMNW5EaTh3N2d0Z1NnRTR0UmIKcXdZMkJmUlJjS2lialIxd3lPeTVTckVab2lZT0lBR0d1Uld0ZzIzaWJBajY0dDhWL2dhczdnSnRSbmFGOHdoVgoxdVdkaExiamZNS1lmdGFsOWRsRVptTEl2Smo2T3lHdGNaQm9vV0FFbnhIYmxLZXpPZmVWenFTUmxJU01pLytGCmRsYXBYVExWV0tyQm9LVUtqZXh3SGhsRktmK0MvRzJKQzJ2enZ2M01iQWIxejI4cUxQdEh4UWh4cno2cnJRelIKdG56aVIwc01YTFNIUlN4d0NacVk1L2MzM1VOdHBzeVhKRDN5OGJtaDR6RDJSTmZaVExLOWxqRkxDSitneFBYaApXbTdaREgrWE15b05VOGNlSnhzVDJDVFplZGFuT0NSUUdMVGpBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVabkJJUXR2azlyREM2eWpDZ2hqS09NUll1dFF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFMVBGMUhtaDgveE0vTTkwVHNZcU1kSFdOTElLT3VaRXRSS1FKSmwweGZGYmFQSld0K2ZSUm0yCmRDazNYN1FUSExYVGRubkxkYXUzZGRWK054VThheG1RUWdGRWpCY0ViUXZSVElkV1YxN2tXd2RMVm90cElqQWoKNTM4a0RiQUtjYTR3Qnk2UkFXdzFYWUd6T1pXeEJmYWVLNlZ0Yjd3MndXUE81L1ByY1JoNWRKdzZGWHYvdDZWcAplWVVoZThtOEFmSG5RUmhZT3FiSlZmWXhhQ1Avais1eVJZR3pjRmtXU0dZdkRwU1dmd0krWlRGWFIzYVFzZHQ0Ci9QZlBhdEthVWxXQWNwTW5HT29kS0JIa1VOZGgzR3FZNkd3MkhDOWF0M1F4TkpDTmdBdGw2c05rWHN1b3VCNUQKRVB3ais4Rm5LQmFLRS9mS2JyVHpReW9EVkQrSllmTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRQXduNGdDMlNlK2tYa2M1RVFvZUZ4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRFd01UVTFNakEyV2hjTk1qZ3dNVEV3TVRVMQpNakEyV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEeXVyQW9NL0l0ZHk0VlBQaXJEbFhobjBrYXRaSmNoWUVkd25rY2JoaVpsbHpnUXNyMlRYMi8KdzBJQUJ3cnVsS2Y1N1d0MmtCeXc2K2M1NnBFNjkyRkhWd0NJMDIzdFVzckFnZjdVOGx4bjFjdnJ3Z2l3Y0pVZwpIZ0hWajF6SXJQc1FMZXc5TStnZjl3Si9RRXZQd3V1dklHSnBqb3V4YUdqY1J5OW42azA2dElYZGtjazJabWRSCnRwZ0lGbWMvdWlFeER1NmdKbFMwdmN4RERPSzJxaEFJYzNlVUlGWDRGSEM5b1F4bUJ6VzlFV2FOUzYrdlFBcXgKTGxweUxqcEpyaFU2NEJ5U0ZKOHJRcjZyRGRCSkJpZlhtVlkwZkkzRHNXVVF2eGhkZi9UVC8zR0syMVFpVCtJVgpKcThWRHQ5MzBXTHFUWDV2ek9xcG9sVEtGa2M1QXRiL0FnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JSbWNFaEMyK1Qyc01McktNS0NHTW80eEZpNjFEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBUkFkRnBOODBoRUF4SDk3K1ZCeFgrUkhsemFEWkJQV3VwZ3hOS2puVmpGeC9lZkFBeDZRdU9RdytNREFDCk1RaUEyTGNqTDlaMndINUY2YmF2Y21la01rTlg2a0lhOFdYdGc3NFpyd3kvKzlyc1ZBK3hkY0RmaUNIV0hyTUUKVVcvVmZxUWc3OUZJUEpZclVJem9QUmErZ0VGczRESm9WUW9oempwSHYxRTJuaEU0RGtpZ3NwTmZDSkt4SW1wcgpRZEpNMlN5QVk5N0VLZGZZTktKanpmV2FJMk40L2dqb2xFbTV0Zkh4eU5Ed09RdlRGOW9oN1VxQnVCUnVHVU9CCjAvSjZTemR4QTdmVTRSK3h3OEgyTXlqUHpmaFltTG91ZUIvVEtzVnI1anREM0NlTXJzUmc2d1hKRWt0dWNwL2UKTWpCa3EwUUpoMVhLeTNpcmRMMEZZZ0lPNlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBOHJxd0tEUHlMWGN1RlR6NHF3NVY0WjlKR3JXU1hJV0JIY0o1SEc0WW1aWmM0RUxLCjlrMTl2OE5DQUFjSzdwU24rZTFyZHBBY3NPdm5PZXFST3ZkaFIxY0FpTk50N1ZMS3dJSCsxUEpjWjlYTDY4SUkKc0hDVklCNEIxWTljeUt6N0VDM3NQVFBvSC9jQ2YwQkx6OExycnlCaWFZNkxzV2hvM0VjdlorcE5PclNGM1pISgpObVpuVWJhWUNCWm5QN29oTVE3dW9DWlV0TDNNUXd6aXRxb1FDSE4zbENCVitCUnd2YUVNWmdjMXZSRm1qVXV2CnIwQUtzUzVhY2k0NlNhNFZPdUFja2hTZkswSytxdzNRU1FZbjE1bFdOSHlOdzdGbEVMOFlYWC8wMC85eGl0dFUKSWsvaUZTYXZGUTdmZDlGaTZrMStiOHpxcWFKVXloWkhPUUxXL3dJREFRQUJBb0lCQVFDTVVtN0tIeFd2UVFucwpEejUyclNmcThrbXgzaXdKdnNoZzZ1OVhCekxEZjVDYnVTRmFlSHZzNHpXQmpKQytVa1Exa1JLaURUZjQ4N2ZOCjNKUXU4WnBVUXJDMWFQMVF5SjhiNFVydjBsaW5Vb3E3OVlWT2N4ZFM1T1lNanYrRnA3TFFyS3U0eWd3MGhuajAKRmJoK0dHSmw4S1BVQUNzejJYZGRlTzJuOW1URlBUMDZSanZpS3NFQkhjdFllcDRMTzkvMzJzMlVJOWcrSHVJSQpjYkhFcnNqM0w4WXQ4WWdZWFFCekVEWmRCZ3FhSlVzdkJzSHc3TWF5RDV3Vk12MG4vYUZnN0pFT1NXS0JSYm40CnExLzl0aUNZbTRnOHJsMkM4N2JIdUxmeFRhZ3ZJVmw4Yy80M2ZhUnVzekY4V01NakpsdC9TYUZVRUJpVk1YWkMKTFFia2hzbHBBb0dCQVBpdHZ5RzBjVkp4M01RbDJUNkZvdm5HNVBWakYrQ3B1MXdMNWdjYUVLVHgrR1NCcmx3TwoxY2FqQzE3R2lLT3lmK05rYzhhNk5FVHgwUzZOcXlZWEJDeDZRM3NqaXdFa0doOU93U2RLdmtHZXdoS05hTEpZCkdDK09CNWU5b2hIeUVOaXJWTmV3VmFzZGJwQTJuTlNtOTRxTUlHWmg2SWgyRUpTakUyZnpDWExkQW9HQkFQbmcKR2ZkSXVNZ1AvUmlER0VHRTVNWGNJbjJncE9GZTFkQ0RXRWJTU3Z4MnBiQWgxU3l0T3FIQWVEKzJqMUxOUnVabwo5ZG1sN0pkOW1uZ3FqQk9rMjN0NXVhYmFFanI4dEVKNkgwb2ppMmZnT3NTWUF5VmFRSHhMRnlEOGxvNkh5TDJhCjdQby8xQkRKNVc1cjR3QmRDbDUrMU9ERlpwNkJVSGdDMDI1bTJVMkxBb0dCQUpXaW5zN2VNQTVHKzJ0L3h0QXIKUTV6K3hFaXYzdTlOMHJLWmFrbTlzbVErUVpQZ3dKVWVUQjVoZjNjQkNibE9zRXVZNTEyZUw5T0ltckZqaDZlOAowOE1ic3IxRzd0NjU1WW9QTG9UQkllaUVhZzBWei9qNHIxejJIclY4NHlmZk82blV0cEd1eG0zWG9PN2dIZENMCnc0bzN0VXRHQU5FVUVmZ09oSi9aQzBkMUFvR0FYNzdYTkVIUlRCZVVTNGd3Q3lyNDNqZnpuMSttemhTZ3FUMHEKM2poR00yYmpKaEpRdE1YTDZaN3VkTHRuUDdzWXA4RWdNejI0NG5ObWRSVVloNDVyNjJ4QkR3WVFaam5lZUhxQwo4czJiNVRtdVN4WlVYa091NGZHRDgwZldDTmRPdkJoWkphcS9mNDlkTW1wMG1QY051aGV2U2xGWmVQTGorcGhhCm03c2RHUEVDZ1lCTGxzdXlpbEhQUUlsdjkxNk1YNmNpTTk1VCtLTXMwOEEvWGFCU1UrNDIwU04xUXlJY0hpcWcKSHFMcDNmZW5TYzRoRkpiSFRjWXBIaWI2bmVUWm4zVUtnL3kzUGhZSnRXNHZuRkhRMm5xWU1jT2IwRWN5LzhpRAovUFgyd3pxcEY0czNCUmNENzVGS095YnBTZlZ6WWQvNCswdTY4eUhuR0h3Y0NRcGxHNUlKUEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZEIrcW56a21xKzczb3ZxQ3gvOFp4ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRFd01UVTFNakExV2hjTk1qZ3dNVEV3TVRVMQpNakExV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQy9jaWN3NDlpVlVGbVpDZURvelZyNEYzMFNQem1EbXZMNW5EaTh3N2d0Z1NnRTR0UmIKcXdZMkJmUlJjS2lialIxd3lPeTVTckVab2lZT0lBR0d1Uld0ZzIzaWJBajY0dDhWL2dhczdnSnRSbmFGOHdoVgoxdVdkaExiamZNS1lmdGFsOWRsRVptTEl2Smo2T3lHdGNaQm9vV0FFbnhIYmxLZXpPZmVWenFTUmxJU01pLytGCmRsYXBYVExWV0tyQm9LVUtqZXh3SGhsRktmK0MvRzJKQzJ2enZ2M01iQWIxejI4cUxQdEh4UWh4cno2cnJRelIKdG56aVIwc01YTFNIUlN4d0NacVk1L2MzM1VOdHBzeVhKRDN5OGJtaDR6RDJSTmZaVExLOWxqRkxDSitneFBYaApXbTdaREgrWE15b05VOGNlSnhzVDJDVFplZGFuT0NSUUdMVGpBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVabkJJUXR2azlyREM2eWpDZ2hqS09NUll1dFF3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFFMVBGMUhtaDgveE0vTTkwVHNZcU1kSFdOTElLT3VaRXRSS1FKSmwweGZGYmFQSld0K2ZSUm0yCmRDazNYN1FUSExYVGRubkxkYXUzZGRWK054VThheG1RUWdGRWpCY0ViUXZSVElkV1YxN2tXd2RMVm90cElqQWoKNTM4a0RiQUtjYTR3Qnk2UkFXdzFYWUd6T1pXeEJmYWVLNlZ0Yjd3MndXUE81L1ByY1JoNWRKdzZGWHYvdDZWcAplWVVoZThtOEFmSG5RUmhZT3FiSlZmWXhhQ1Avais1eVJZR3pjRmtXU0dZdkRwU1dmd0krWlRGWFIzYVFzZHQ0Ci9QZlBhdEthVWxXQWNwTW5HT29kS0JIa1VOZGgzR3FZNkd3MkhDOWF0M1F4TkpDTmdBdGw2c05rWHN1b3VCNUQKRVB3ais4Rm5LQmFLRS9mS2JyVHpReW9EVkQrSllmTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRUGRyMFdNQy9wcVZNdmVEUmFSa01ZVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRFd01UVTFNakEyV2hjTk1qZ3dNVEV3TVRVMQpNakEyV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMWFqcU9idlMweWMxZTVOSnpGTjMKMjlBVWVSTWNrclkzVWhCYVg5ZkNTQ2w4RGphWjNsN0lWc2dUdFljTy9YTU1ISFpiNlpTSTNDL3BaTUZWMmEraApOZGd6M0NvUkcrODU3amNWRlZla1V0SjU3aktZNU9rMVRvL2J4WURMcGo1Z1BSVWVlTHNEaG52aTFXSHRvWStxCmdLWEdsckFkbEVDTnpINkozWW9JTFdBU1VyblI1MzJxenNxZnZSQ2IzcmNScGU5akhkOFNWRi9FVTdpdnllMWEKbUIwdmNoTWpleDFlZ3MydmRBU2U5U3pHVnljMi9DbDlrUjhXUEo1a0JsU0RvMFV3U2RjTjdBV1cxNVRsYloreApyWmhabnQyWTI5RllndXF3MkZ0R2l1RitlYkxTV2N2Y3VEMERDRUpTNENFYnZyUUUyM0hKdjNWRDJMYm1sVTgxCkdRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSbWNFaEMyK1Qyc01McgpLTUtDR01vNHhGaTYxREI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUFQNHluMWkvVXEwTVJQT1dKTGh2MEQrcGIzWFJsQkw2TS92anQ5cEdTN1NXZWZZY2Y1CnduZXhtR3dhTEZ4ckl0L2lIc0t3WDFLQnVmVkpFOEpTbTFSMmlaRXg4RG05RDFEOTNsR1lQclV6QjNvWlZybTMKTWhidTFBSkgrTnV1OWMwNkRtaXRJd3dvMnMzWERNVGd6ZFg2eFlJcXBuYklMY3VIbnBLbkd4aTZQd2pkMUJISgovQWtWdGZlZ0VmemtxS3FlTXJsUjNhaTNtTnJuUkdtN0drekMvYTE2VTZNSWUrVDRSdzV1eFB5cmZ1R1YxWWZRCjdXc2tjQXd3Zms1WGI0Vnc1NVdCeVpUcytaVFVhL3czYWtLdExPR3ZDcXBKVGNNRGNPRHhEakw3clRWdkUvSUMKdWlHbE5ieGFEZ1h0Mzgrditpc0lVdmtWZklXbkk5c2ZDS0NZCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMWFqcU9idlMweWMxZTVOSnpGTjMyOUFVZVJNY2tyWTNVaEJhWDlmQ1NDbDhEamFaCjNsN0lWc2dUdFljTy9YTU1ISFpiNlpTSTNDL3BaTUZWMmEraE5kZ3ozQ29SRys4NTdqY1ZGVmVrVXRKNTdqS1kKNU9rMVRvL2J4WURMcGo1Z1BSVWVlTHNEaG52aTFXSHRvWStxZ0tYR2xyQWRsRUNOekg2SjNZb0lMV0FTVXJuUgo1MzJxenNxZnZSQ2IzcmNScGU5akhkOFNWRi9FVTdpdnllMWFtQjB2Y2hNamV4MWVnczJ2ZEFTZTlTekdWeWMyCi9DbDlrUjhXUEo1a0JsU0RvMFV3U2RjTjdBV1cxNVRsYloreHJaaFpudDJZMjlGWWd1cXcyRnRHaXVGK2ViTFMKV2N2Y3VEMERDRUpTNENFYnZyUUUyM0hKdjNWRDJMYm1sVTgxR1FJREFRQUJBb0lCQVFDT2ZhOXZ2M1p6d2RObQpUYTFLNm1PbUloaDFRcXlzbjM4M2FKYU5FcnlNR2JhVldBNjRBYWhFVC96czlGeW41T0V2M2pPZ0RLSlZqbEp1CkVvNHB0bnFpQ1VWVTBHMUdudjJZZy8yNGxSR085clhBaU5mMDJoN2wvUVVKcThLbFpUWVRwcEVDM1Y0VmcydWMKK1VsY2xRNlY2M2tNcC9taUZJYzgyU3NpcDFxYXZ4NWE0WlFUY1orS0xscnJ4cmdWS1pnT1NjVC9IdVJIZ2xGYgozaWRITjFtL3l6YmRBTjFuRkpudWlmKzZyY1N2UmthSjNrVFFsNy9VSmJkeFlhRW91ZVM2aWxBWE1GdmFaaW9WCjBkWTNsWjlaaTJvK2RjdmxxSW5raXl5aCttY1h6VmpvQ1UyMUU0Tm5LQUNNckdaQThpdFAwWGs2aU9nenZnVXAKdXh1eXRnNzlBb0dCQU4vcTNkaVVHcVQ0SDJUL252TWVuMnd6V1pHSVUvenJTcUEvNlRCSWs5a2ovQVNtSVdkVgpIaWVSMXo4SE84MlN2eVh6Q2Z5M3dsUU5zanJrc1JiUU9PRmJOQnJkSDlQNDlzZEhaVSt5QjhZZFRubEtKY2xxClBlRGo1NXg5UzYzdG0rNEZ2RW1kV0ppc3dJZndjZC9uelNkS3FCNEZCa1AveW1wQVpMck1QR2JmQW9HQkFQUkYKemxVeUQ2blhSRlJ2U2EzSnliUVVYSmtpSEV4cHQ2ODROejdiZTIvQ0cwSmdYSEJUMWRKaVlEQm01U0toRnJCOQoyNDJISkczRWpFNXl3NS9qcVhJSENMN0d3VzlvemdRSnNCTGhmQWpVdksycFFTakRXSHp3WVRFVmxURTQzQU45CjRNVTBGL3dQM3ZRY09CcW93dTl5QzJwUVV5YjV3M1RoMVRxWmJUc0hBb0dCQUtOb2tGdWt3Y2tRZGtETHQyRHYKUVNMQ1dxUTFYQzJnUElhei9XWktJUE4vS2tUdVJFUlh2cmpiMnJ4WmVCQXUvcVlnTm5LaVhBUGhOdWQ1eTY2OQphRFUxek5HcCs3ZEM0ajFONGlhRjR0eDJ1TFVWSW54WnR5eXV4WERUazI0cmovYmxZcUpLWE1TV2xhN2ZEd3Q2CjY2RzMvdlpoYmxBamxNRnptczhqaXhUN0FvR0JBTWtZb3NuT2djaWYyTGZ1T21qaEk3V2x3YW1yeEVKQUVpRWwKRlk0ZzRKamI0dGNkUDF5V0dBU3dTbUh1ZzVxanBXczg0Yis4endleTlKTXN0ZEh1ZWJQUENLc09NM2NGZi8waApBSnc2bDRNcHAvOEx4UUhLK0JFN1Q3ZzUvVzNkVW50cGFON1FpU0pRNm9wcXBPR0ZwNTI2ZEoxY2JXZzczR1pmCitNdmFQV3VIQW9HQUk5ZkIyTndhZm90Z1NxUUNBM3ZhVUwrVEllYVFuQ2Z2aHpjdUVNaXBLZCtCcHZBOUxnYXIKd2ZndkVVbnN5Y3Yrdi9XU1FKWGdvSDBLQUMyYStzeVVpMVBWSnUyRmxyaXlVYmFzMEYrWVNlU0JwRkJOeUlVdAp0U0lLb1E4M0lveUpoNVYzTS9zZ0RZNHlKaEROSmY2ZzBxbVNzcVI4TTZUNitWN2Y1NnhOS2pjPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-config/clustermesh-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-clustermesh
  namespace: kube-system
data:
  tipani: ZW5kcG9pbnRzOgotIGh0dHBzOi8vdGlwYW5pLm1lc2guemVyb2xhYi5saW5rOjIzNzkKdHJ1c3RlZC1jYS1maWxlOiAvdmFyL2xpYi9jaWxpdW0vY2x1c3Rlcm1lc2gvY29tbW9uLWV0Y2QtY2xpZW50LWNhLmNydAprZXktZmlsZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoL2NvbW1vbi1ldGNkLWNsaWVudC5rZXkKY2VydC1maWxlOiAvdmFyL2xpYi9jaWxpdW0vY2x1c3Rlcm1lc2gvY29tbW9uLWV0Y2QtY2xpZW50LmNydA==
  everest: ZW5kcG9pbnRzOgotIGh0dHBzOi8vZXZlcmVzdC5tZXNoLnplcm9sYWIubGluazoyMzc5CnRydXN0ZWQtY2EtZmlsZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoL2NvbW1vbi1ldGNkLWNsaWVudC1jYS5jcnQKa2V5LWZpbGU6IC92YXIvbGliL2NpbGl1bS9jbHVzdGVybWVzaC9jb21tb24tZXRjZC1jbGllbnQua2V5CmNlcnQtZmlsZTogL3Zhci9saWIvY2lsaXVtL2NsdXN0ZXJtZXNoL2NvbW1vbi1ldGNkLWNsaWVudC5jcnQ=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  enable-envoy-config: "true"
  envoy-config-retry-interval: "15s"
  enable-gateway-api: "true"
  enable-gateway-api-secrets-sync: "true"
  enable-gateway-api-proxy-protocol: "false"
  enable-gateway-api-app-protocol: "false"
  enable-gateway-api-alpn: "false"
  gateway-api-xff-num-trusted-hops: "0"
  gateway-api-service-externaltrafficpolicy: "Cluster"
  gateway-api-secrets-namespace: "cilium-secrets"
  gateway-api-hostnetwork-enabled: "false"
  gateway-api-hostnetwork-nodelabelselector: ""

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "true"

  bpf-events-drop-enabled: "true"
  bpf-events-policy-verdict-enabled: "true"
  bpf-events-trace-enabled: "true"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: nexus
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "2"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  routing-mode: "native"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-tcx: "true"
  datapath-mode: "veth"
  enable-masquerade-to-route-source: "false"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  direct-routing-skip-unreachable: "false"
  enable-local-redirect-policy: "false"
  ipv4-native-routing-cidr: 10.0.0.0/8
  enable-runtime-device-detection: "true"

  kube-proxy-replacement: "true"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  bpf-lb-sock-terminate-pod-connections: "false"
  nodeport-addresses: ""
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-mode: "dsr"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "false"
  arping-refresh-period: "30s"
  k8s-require-ipv4-pod-cidr: "true"
  k8s-require-ipv6-pod-cidr: "false"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-node-selector-labels: "false"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "true"
  ipam: "kubernetes"
  ipam-cilium-node-update-rate: "15s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "10"
  k8s-client-burst: "20"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  dnsproxy-socket-linger-timeout: "10"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-initial-fetch-timeout: "30"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "true"
  envoy-base-id: "0"

  envoy-keep-cap-netbindservice: "false"
  max-connected-clusters: "255"
  clustermesh-enable-endpoint-sync: "false"
  clustermesh-enable-mcs-api: "false"

  nat-map-stats-entries: "32"
  nat-map-stats-interval: "30s"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/cilium-envoy/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-envoy-config
  namespace: kube-system
data:
  bootstrap-config.json: |
    {
      "node": {
        "id": "host~127.0.0.1~no-id~localdomain",
        "cluster": "ingress-cluster"
      },
      "staticResources": {
        "listeners": [
          {
            "name": "envoy-prometheus-metrics-listener",
            "address": {
              "socket_address": {
                "address": "0.0.0.0",
                "port_value": 9964
              }
            },
            "filter_chains": [
              {
                "filters": [
                  {
                    "name": "envoy.filters.network.http_connection_manager",
                    "typed_config": {
                      "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
                      "stat_prefix": "envoy-prometheus-metrics-listener",
                      "route_config": {
                        "virtual_hosts": [
                          {
                            "name": "prometheus_metrics_route",
                            "domains": [
                              "*"
                            ],
                            "routes": [
                              {
                                "name": "prometheus_metrics_route",
                                "match": {
                                  "prefix": "/metrics"
                                },
                                "route": {
                                  "cluster": "/envoy-admin",
                                  "prefix_rewrite": "/stats/prometheus"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "http_filters": [
                        {
                          "name": "envoy.filters.http.router",
                          "typed_config": {
                            "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
                          }
                        }
                      ],
                      "internal_address_config": {
                        "cidr_ranges": [
                          {
                            "address_prefix": "10.0.0.0",
                            "prefix_len": 8
                          },
                          {
                            "address_prefix": "172.16.0.0",
                            "prefix_len": 12
                          },
                          {
                            "address_prefix": "192.168.0.0",
                            "prefix_len": 16
                          },
                          {
                            "address_prefix": "127.0.0.1",
                            "prefix_len": 32
                          },
                          {
                            "address_prefix": "::1",
                            "prefix_len": 128
                          }
                        ]
                      },
                      "stream_idle_timeout": "0s"
                    }
                  }
                ]
              }
            ]
          },
          {
            "name": "envoy-health-listener",
            "address": {
              "socket_address": {
                "address": "127.0.0.1",
                "port_value": 9878
              }
            },
            "filter_chains": [
              {
                "filters": [
                  {
                    "name": "envoy.filters.network.http_connection_manager",
                    "typed_config": {
                      "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
                      "stat_prefix": "envoy-health-listener",
                      "route_config": {
                        "virtual_hosts": [
                          {
                            "name": "health",
                            "domains": [
                              "*"
                            ],
                            "routes": [
                              {
                                "name": "health",
                                "match": {
                                  "prefix": "/healthz"
                                },
                                "route": {
                                  "cluster": "/envoy-admin",
                                  "prefix_rewrite": "/ready"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "http_filters": [
                        {
                          "name": "envoy.filters.http.router",
                          "typed_config": {
                            "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
                          }
                        }
                      ],
                      "internal_address_config": {
                        "cidr_ranges": [
                          {
                            "address_prefix": "10.0.0.0",
                            "prefix_len": 8
                          },
                          {
                            "address_prefix": "172.16.0.0",
                            "prefix_len": 12
                          },
                          {
                            "address_prefix": "192.168.0.0",
                            "prefix_len": 16
                          },
                          {
                            "address_prefix": "127.0.0.1",
                            "prefix_len": 32
                          },
                          {
                            "address_prefix": "::1",
                            "prefix_len": 128
                          }
                        ]
                      },
                      "stream_idle_timeout": "0s"
                    }
                  }
                ]
              }
            ]
          }
        ],
        "clusters": [
          {
            "name": "ingress-cluster",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s"
          },
          {
            "name": "egress-cluster-tls",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "upstreamHttpProtocolOptions": {},
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s",
            "transportSocket": {
              "name": "cilium.tls_wrapper",
              "typedConfig": {
                "@type": "type.googleapis.com/cilium.UpstreamTlsWrapperContext"
              }
            }
          },
          {
            "name": "egress-cluster",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s"
          },
          {
            "name": "ingress-cluster-tls",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "upstreamHttpProtocolOptions": {},
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s",
            "transportSocket": {
              "name": "cilium.tls_wrapper",
              "typedConfig": {
                "@type": "type.googleapis.com/cilium.UpstreamTlsWrapperContext"
              }
            }
          },
          {
            "name": "xds-grpc-cilium",
            "type": "STATIC",
            "connectTimeout": "2s",
            "loadAssignment": {
              "clusterName": "xds-grpc-cilium",
              "endpoints": [
                {
                  "lbEndpoints": [
                    {
                      "endpoint": {
                        "address": {
                          "pipe": {
                            "path": "/var/run/cilium/envoy/sockets/xds.sock"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "explicitHttpConfig": {
                  "http2ProtocolOptions": {}
                }
              }
            }
          },
          {
            "name": "/envoy-admin",
            "type": "STATIC",
            "connectTimeout": "2s",
            "loadAssignment": {
              "clusterName": "/envoy-admin",
              "endpoints": [
                {
                  "lbEndpoints": [
                    {
                      "endpoint": {
                        "address": {
                          "pipe": {
                            "path": "/var/run/cilium/envoy/sockets/admin.sock"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "dynamicResources": {
        "ldsConfig": {
          "initialFetchTimeout": "30s",
          "apiConfigSource": {
            "apiType": "GRPC",
            "transportApiVersion": "V3",
            "grpcServices": [
              {
                "envoyGrpc": {
                  "clusterName": "xds-grpc-cilium"
                }
              }
            ],
            "setNodeOnFirstMessageOnly": true
          },
          "resourceApiVersion": "V3"
        },
        "cdsConfig": {
          "initialFetchTimeout": "30s",
          "apiConfigSource": {
            "apiType": "GRPC",
            "transportApiVersion": "V3",
            "grpcServices": [
              {
                "envoyGrpc": {
                  "clusterName": "xds-grpc-cilium"
                }
              }
            ],
            "setNodeOnFirstMessageOnly": true
          },
          "resourceApiVersion": "V3"
        }
      },
      "bootstrapExtensions": [
        {
          "name": "envoy.bootstrap.internal_listener",
          "typed_config": {
            "@type": "type.googleapis.com/envoy.extensions.bootstrap.internal_listener.v3.InternalListener"
          }
        }
      ],
      "overload_manager": {
        "resource_monitors": [
          {
            "name": "envoy.resource_monitors.global_downstream_max_connections",
            "typed_config": {
              "@type": "type.googleapis.com/envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig",
              "max_active_downstream_connections": "50000"
            }
          }
        ]
      },
      "admin": {
        "address": {
          "pipe": {
            "path": "/var/run/cilium/envoy/sockets/admin.sock"
          }
        }
      }
    }
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: nexus
    peer-service: "hubble-peer.kube-system.svc.cluster.local.:80"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    disable-client-tls: true
    
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  resourceNames:
  - cilium-config
  verbs:
   # allow patching of the configmap to set annotations
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgppeeringpolicies
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - tlsroutes
  - httproutes
  - grpcroutes
  - referencegrants
  - referencepolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  - grpcroutes/status
  - tlsroutes/status
  verbs:
  - update
  - patch
- apiGroups:
  - multicluster.x-k8s.io
  resources:
  - serviceimports
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-operator/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - update
  - patch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-operator-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/cilium-envoy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cilium-envoy
  namespace: kube-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9964"
  labels:
    k8s-app: cilium-envoy
    app.kubernetes.io/name: cilium-envoy
    app.kubernetes.io/part-of: cilium
    io.cilium/app: proxy
spec:
  clusterIP: None
  type: ClusterIP
  selector:
    k8s-app: cilium-envoy
  ports:
  - name: envoy-metrics
    port: 9964
    protocol: TCP
    targetPort: envoy-metrics
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: LoadBalancer
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
  loadBalancerIP: 10.181.0.10
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  annotations:
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: grpc
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 80
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        - name: KUBERNETES_SERVICE_HOST
          value: "nexus.zerolab.link"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: envoy-sockets
          mountPath: /var/run/cilium/envoy/sockets
          readOnly: false
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: "nexus.zerolab.link"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "nexus.zerolab.link"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          privileged: true
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      hostAliases:
      - ip: 10.111.0.10
        hostnames: [ "tipani.mesh.zerolab.link" ]
      - ip: 10.171.0.10
        hostnames: [ "everest.mesh.zerolab.link" ]
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host or apply sysctlfix
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
      # Sharing socket with Cilium Envoy on the same node by using a host path
      - name: envoy-sockets
        hostPath:
          path: "/var/run/cilium/envoy/sockets"
          type: DirectoryOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
          # note: we configure the volume for the kvstoremesh-specific certificate
          # regardless of whether KVStoreMesh is enabled or not, so that it can be
          # automatically mounted in case KVStoreMesh gets subsequently enabled,
          # without requiring an agent restart.
          - secret:
              name: clustermesh-apiserver-local-cert
              optional: true
              items:
              - key: tls.key
                path: local-etcd-client.key
              - key: tls.crt
                path: local-etcd-client.crt
              - key: ca.crt
                path: local-etcd-client-ca.crt
---
# Source: cilium/templates/cilium-envoy/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium-envoy
  namespace: kube-system
  labels:
    k8s-app: cilium-envoy
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-envoy
    name: cilium-envoy
spec:
  selector:
    matchLabels:
      k8s-app: cilium-envoy
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-envoy: "unconfined"
      labels:
        k8s-app: cilium-envoy
        name: cilium-envoy
        app.kubernetes.io/name: cilium-envoy
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-envoy
        image: "quay.io/cilium/cilium-envoy:v1.30.8-1733837904-eaae5aca0fb988583e5617170a65ac5aa51c0aa8@sha256:709c08ade3d17d52da4ca2af33f431360ec26268d288d9a6cd1d98acc9a1dced"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/cilium-envoy-starter
        args:
        - '--'
        - '-c /var/run/cilium/envoy/bootstrap-config.json'
        - '--base-id 0'
        - '--log-level info'
        - '--log-format [%Y-%m-%d %T.%e][%t][%l][%n] [%g:%#] %v'
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9878
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: "nexus.zerolab.link"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        ports:
        - name: envoy-metrics
          containerPort: 9964
          hostPort: 9964
          protocol: TCP
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_ADMIN
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: envoy-sockets
          mountPath: /var/run/cilium/envoy/sockets
          readOnly: false
        - name: envoy-artifacts
          mountPath: /var/run/cilium/envoy/artifacts
          readOnly: true
        - name: envoy-config
          mountPath: /var/run/cilium/envoy/
          readOnly: true
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: HostToContainer
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium-envoy"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cilium.io/no-schedule
                operator: NotIn
                values:
                - "true"
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium-envoy
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
      - name: envoy-sockets
        hostPath:
          path: "/var/run/cilium/envoy/sockets"
          type: DirectoryOrCreate
      - name: envoy-artifacts
        hostPath:
          path: "/var/run/cilium/envoy/artifacts"
          type: DirectoryOrCreate
      - name: envoy-config
        configMap:
          name: cilium-envoy-config
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          items:
            - key: bootstrap-config.json
              path: bootstrap-config.json
        # To keep state between restarts / upgrades
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # ensure pods roll when configmap updates
        cilium.io/cilium-configmap-checksum: "80a83340f2de8237f11e6acaa6559213e8db31704eb853cc659aa28b32f03cff"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.16.5@sha256:f7884848483bbcd7b1e0ccfd34ba4546f258b460cb4b7e2f06a1bcc96ef88039"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "nexus.zerolab.link"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt=etcd.config=/var/lib/cilium/etcd-config.yaml
        - --kvstore-opt=etcd.qps=20
        - --kvstore-opt=etcd.bootstrapQps=10000
        - --max-connected-clusters=255
        - --health-port=9880
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        readinessProbe:
          httpGet:
            path: /readyz
            port: apiserv-health
        ports:
        - name: apiserv-health
          containerPort: 9880
          protocol: TCP
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir:
          medium: ""
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  k8s-app: clustermesh-apiserver
              topologyKey: kubernetes.io/hostname
            weight: 100
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.16.5@sha256:6cfae1d1afa566ba941f03d4d7e141feddd05260e5cd0a1509aba1890a45ef00"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          # livenessProbe will kill the pod, we should be very conservative
          # here on failures since killing the pod should be a last resort, and
          # we should provide enough time for relay to retry before killing it.
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 10
            # Give relay time to establish connections and make a few retries
            # before starting livenessProbes.
            initialDelaySeconds: 10
            # 10 second * 12 failures = 2 minutes of failure.
            # If relay cannot become healthy after 2 minutes, then killing it
            # might resolve whatever issue is occurring.
            #
            # 10 seconds is a reasonable retry period so we can see if it's
            # failing regularly or only sporadically.
            periodSeconds: 10
            failureThreshold: 12
          startupProbe:
            grpc:
              port: 4222
            # Give relay time to get it's certs and establish connections and
            # make a few retries before starting startupProbes.
            initialDelaySeconds: 10
            # 20 * 3 seconds = 1 minute of failure before we consider startup as failed.
            failureThreshold: 20
            # Retry more frequently at startup so that it can be considered started more quickly.
            periodSeconds: 3
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
        
      restartPolicy: Always
      priorityClassName: 
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName: 
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
