---
# Source: cilium/templates/cilium-secrets-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: "cilium-secrets"
---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5CanovSU84Q3NKMnNINWUweGxXMW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TkZvWERUSTRNREV3TmpFeQpNakF4TkZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbWRBVkp2eUttbHJZNVA3N1NQV0R6Nk1mRzg3dUd2V1FJTk9ubjBrZnUybFV3MVQKYU5SVEw1NkxOMy96WmxsNEh2WmkydEJkSFhnRTRhcEFhdjVqcnBhcnI1RkdvOUVZUmxJUWNaYlI0RE5OK3lkUQpCUjlGUit0ZDBwVnNwbkh5MWkzbDVuSWRIbTBzVmZCQW1EaWZSRGtlTUFaS3d1L3F2SnRtNURRM28rU29EZTVJCnlyUGxBSXNiRlRnQU5iK3lQV3U2eStQbFNKdVlRUXVSQkVDM3UvVHZmdmNsbVJtR3lGQy9BU2s3bHVrVkh5ckUKR3J2OFZzTmZ2M0o3U1R6dGsvZWNNWHM3Y3NjK1NLc2FLR0RJUWNhZkJQUFF1MExReUtmZDl2MDZFYTg3WGprbQpVZW5RSEs5NHhycHlmbWdXSzRRTXByUjBRWFNrdEF5OS94NkZpd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQ01GaGdDWVZmdEZwOVdEZ0k2ek5KcElDYmJ3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2c5N3hvQ1NmVE1sZWYyMXRKaEdnb0g1YmczaXBvalQ0WmVQUTA2NEsrK25LMHpLR05UOEJvClFLOEVSMW05eExnMnRaQUZQMlZQY3dVN1d4bWRyc0FCby9Mc1pSZ1dtbDYxZG5zS2puSUVGQnRQK0N2SUZiSUUKM29jZCtmWHY1VWxUYXRYR09ZbFZsWTMvK0VOaUp2bHMwOTUrbEJob2lnN0dzVktIblF6OFRkQ21zczRDcmNRVwpScFRDSXk0cXZaSW02SW5wenJ4T1MyS05FaFEyYXJNSHR6RmxTd3dMRzZMSTFETlpESjliSUpaZEF4NVE3UkJ0CnVyK0owOERtSTRQMDdkb2hqYjE0S3owQzZNRmxYb0R0UUNnY0MwcWJmYmhiV0lhd1RSb0NpOElvQmpZWDNKc1oKbXd0ODdOZWZUaWZXZlJkNGdQSmprVEhJTys0SzFLak8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBM21kQVZKdnlLbWxyWTVQNzdTUFdEejZNZkc4N3VHdldRSU5Pbm4wa2Z1MmxVdzFUCmFOUlRMNTZMTjMvelpsbDRIdlppMnRCZEhYZ0U0YXBBYXY1anJwYXJyNUZHbzlFWVJsSVFjWmJSNEROTit5ZFEKQlI5RlIrdGQwcFZzcG5IeTFpM2w1bklkSG0wc1ZmQkFtRGlmUkRrZU1BWkt3dS9xdkp0bTVEUTNvK1NvRGU1SQp5clBsQUlzYkZUZ0FOYit5UFd1NnkrUGxTSnVZUVF1UkJFQzN1L1R2ZnZjbG1SbUd5RkMvQVNrN2x1a1ZIeXJFCkdydjhWc05mdjNKN1NUenRrL2VjTVhzN2NzYytTS3NhS0dESVFjYWZCUFBRdTBMUXlLZmQ5djA2RWE4N1hqa20KVWVuUUhLOTR4cnB5Zm1nV0s0UU1wclIwUVhTa3RBeTkveDZGaXdJREFRQUJBb0lCQVFDSDhUN2VPTkJHWWxlMAo3MUN2UEJkdERBT2RUL1NHSHN4QWRNS0tsOTNHQkFicEJCMDIxNG5kY3FDUUZSSzNQZnJ4bWhNRXd4WVhuRFFICnFDUm1BZ2IyUWJ6QnZTQWJwQVNkZnkzejhJZHE3cEU4OG1PMExkQVFUT3IxZkVhRVd1UmZUSURaWW1rd0h2VloKdGxnVmM0N09pY2RNL1p1WEdrVTJjaHJyWkl1YURsYzIxRktDb2VvNjNGWG5jbXh2bHdCN0x4dDhXTDdIb3MzQwpDSzBqclg0elp4MUlKNkFMWi9wMEhpOUNzdGhWbXpWUnJiQVdWVjlrdnEzNTkzN3FKVCsyditTejdnWXJvbzFlCmVCTExzL1p3aVpmaVpmQVdjK3dQUlJhQXhWUG4vazlFc1Y1OGdlQTFzM3BFUjBFRnk1cVFpUE04OWdyS0ovbWQKdk5wYlhhWEpBb0dCQVBtaFhJQ0VmZkZKQVRYeE5qQVhJcG1mK3lnTkoraXQ2UldrVzdMZ0tGL0hObHR2NWthZQpDSTZhcXR3cjVOQ2ptVkpwaFRyMkNFUUlmaThqcnZyNUxuckRhSE1BTEgvV3FabTdiQ0hBczRSVHJKQmhwclFaCnh0Zk9nRmdIT2NWSlMyZVNydW1qS0V0OWFMUWZ0bTJsMzdnblpvaFd4RUJvSngzQ2pDbitBSUpWQW9HQkFPUVUKQ1pQdDZuWUhVS0Z5V25uK1pWNnhYa0RwTGRXQkd4QlpnYW1zRURQb1VCRno5ZndPd1doZTRIdzJ4OFQ0dUkyKwp4YmE0aHAzMDUyM2RSdDNhbFhndEo1NHhQdEhXb3RRbUNyR1pUcnd0cGtIZFl1TkhmNS9zWE5Kd1pPQzBhV0VLCkhtb0Vwam5JN1FHaUFJMm1CaU5KS3lZK1d5VGNsczh0aUVXVDdZaGZBb0dCQUxrM1lwendzVWwvczJoRXFzSVAKeUZwWCsxQUNRdVEvZFR2YmtUWXRYNGVCRmZIT0d2dTJjZjdzLzIwUkhGczVwNThnTC94SlpHU21NSW5sWGdWVgpNWWxneDNUY1lpZ1FMQkttbjFxRDBpNlNydTBKcDFqbDcwVmNNSm9mOGx0UlFLTitrRTFHQTdYUFBRcTRwUERDCkxEWkU5YXlmUkVuTmZZaDFPdTVGU2pkcEFvR0FJV04xaTN4V3lIU0ZyenpJVmZlUjYyelh1WFRwU3NvZHBpVVUKUUR4NkdyODFpWGlLV0IzbzNsaVZVRm5Nb044d1ZUL0tQZGVCalhvZXJ3eW5wUzZzbHUwMVVZa3dBeFFDdmovYgpiT2hlaUZtK2J3SHp5Z1hiZnhQZytzV05Ydi9LTlhSL3cxRnU3Q0tuMzRkUndXcStsMGZNMDBwcG1WblprZmErCmJrRWJrczBDZ1lBTmw1RmxwdEFvbDVrWmJ0VVhXRXIxa0ZhL3BkUGx3UDRucjRTNkJXTUJEZXMyOHlLcCtNdFEKUTQ5SzV6V3dzR0VTaHQ2dzh4alAyZnhSdG5CdUZJTEJDSTB1Y1k0SDJUL0ZPbmhkMmZpaUJkeFN5eUZJMTVVeQpxMGJqR2tIOU1EenR5T2h1MHRVbVFZRHUxVXYyb202a3JZSWQ4VHZDYmJ2NGM2THlmMXcyREE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVmxpb1B0aXMzVTZ0MHVJTjkxMG9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1USXlNREUxV2hjTk1qZ3dNVEEyTVRJeQpNREUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREN5L3BjeUc4VWZyR1NYMlFDUStYRk0yOTZzWlFlWDBJdmhObEhyaHVsd2FHVjFHZTAKc053cElNTlZIN1BqOFlmdXVOQmNydmdBd0twL1ArUVBaNDNsZWMrcXhkaTVZY1RZb3RTZ2R6VlRUdHNzT0g3cgpDK1RHK1dKRlhHNElvazFXNEduRTVydVQ0VDVyNmdaOUJIWnd1V0IxUUgxVlNtSXkzUkhQcUo5WWNXOUtwREQzCkZtZWFmOHdEOWxST0cyamc0R0dkOHlpZk15ZFpkLzlqRGJZNTg4bmpCV01NOGVQMTBla3dlcjJIUzk2NkJUV0sKUDQ0M1R4S082Y0RIOVkvd256NlZwWE53U2dpdGRTb2pibnlvS0RoV0NHNUpneHI1SUlRNUVydGtQci9ZT20wRgp6eGIzNTh1VFZqdGt5RTFXN3RJMWFlK3ZncmZJSG1na2hSbkxBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV0d0F1WSt0Yzkxd2xjK01MMmNNRGRxZ3F4azh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBQXArdWlhODRjQUpPOHlyQmVIdkdjVXRDUytkTlZ1M3JGaURmTHVhZy9DeUtoTk15b29GZ2lnCjdpQ214eXZWSFBSN0dqdlBsTCt0eVF4WHZPM2xkVWk4V0tJVDhkQXpsRnBoYkppa3d5N1h1ODJ3VW41ZjdyaEMKelpCZHlVN0daa1I0K2JMbDRQYmVqaVpHTk80L2ZoelArQStCWTdmZ0l0ZWZQcmprRmFiNytpbnVBU242b0RZSApjY05wVjNoZjVKK05vWDI3aE9XdlFoZHRNbXIzY2Z6ME5mNDNPOW9lT3hIa1EyMXRDeW9WSEdsd1V1eFpxeWxnCm1vMlIrSmlWc0twOWt0d2xqM2I5VFpLeHltSEZ0NCtxTCtWZnNSZ21ZUGYzelg0S2JmaTFPTWJtUWc3S252dHUKKzRBaGpNNTZGbFc1WEtPajkwSzBFc1d0SGF0VTVOWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGekNDQWYrZ0F3SUJBZ0lSQUljT0Mvb01VeFJlQ2RTSWF1eXVSa013RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkxTURFd05qRXlNakF4TlZvWERUSTRNREV3TmpFeQpNakF4TlZvd0dERVdNQlFHQTFVRUF4TU5ZV1J0YVc0dFpYWmxjbVZ6ZERDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUo3SGM0T3V1Y3RYQWp4WVd3ZkpWMlF3Wlg0YjVyMFB5Nk9uR3B2L2w4T0UKcHlWc0YrWm05UzBjb1FHMFZDSHcvbDRoMU9xR1pYNTJUZXZhOFliTW85OVNTVll1V0RWUlpaRUcvWWYzamh0bAppVGVudTVrQllMZXNNOE5jR010Si91N0laSDNMcC9uU2V2WmljbWlmSHB3anNIYktVVWg3K2lyRHZrQTBtY0J1Cll3R2RWalRrZGMzL1BGMlJ6emRnKy9sNjRmMTJlbThrSEhSSlBnTi8rS29yRG5jaEErUmJtd1JjaS9GZ3hvVncKU0xnTlJSQ2JuamxtL0xmWnFiRHVlb2ZlNDI4K2pIVmN6cktESlBadm5ycmYvSUxGTTd6SDROdENOOU5zRDAzcwo5dEhXalVCMFVJelpNSFJxMXV0Q3YwNTJOQmFSTlRuZ3NsSXNIUUFZcVFjQ0F3RUFBYU5nTUY0d0RnWURWUjBQCkFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUIKQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkxjQUxtUHJYUGRjSlhQakM5bkRBM2FvS3NaUE1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUFXaFdYT1UrRnEvUzdWdzAvY05jWUQ0MlFjcW12UGhvQis2Q2JCY1o2cUVFYW9lYkd1ClA4N3RDdHlqVlI0bG83YVN1V0tvUk9TYnJ5YXBNekVzNjZ6Mkdzb1F5UHFWTVBFR01jMkJTUVZJYzhjc1lTWmMKaGl4azhBZHNRUElwRU91azdjL1VpdXo0NnNkN2JMZDZ4dGw4eEtyd2xndnlFMEorVTJBYnZLUjZIMjVoRkxJcAoyOC96NzhYWlFrTjFjUEZHVXpCdFJzTTRvd0cxQU55UHpRYTBQbUt2YU15MzZEeVAzUlNZWFF6VG1nZlp1TzlwCkVSZ0R5bUhYdElqV00wanJ3NENVRnZnSXlvOGN2ODVIaFlQSkxKQTI5TnNGRDJSa05qbEJDOGpDWHNVUWd3QW0KS1JnVXc3ZEpVWEZ5SEVtWTd0TlRhYWlGYnZJYk4zSFZvTS92Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbnNkemc2NjV5MWNDUEZoYkI4bFhaREJsZmh2bXZRL0xvNmNhbS8rWHc0U25KV3dYCjVtYjFMUnloQWJSVUlmRCtYaUhVNm9abGZuWk42OXJ4aHN5ajMxSkpWaTVZTlZGbGtRYjloL2VPRzJXSk42ZTcKbVFGZ3Q2d3p3MXdZeTBuKzdzaGtmY3VuK2RKNjltSnlhSjhlbkNPd2RzcFJTSHY2S3NPK1FEU1p3RzVqQVoxVwpOT1IxemY4OFhaSFBOMkQ3K1hyaC9YWjZieVFjZEVrK0EzLzRxaXNPZHlFRDVGdWJCRnlMOFdER2hYQkl1QTFGCkVKdWVPV2I4dDltcHNPNTZoOTdqYno2TWRWek9zb01rOW0rZXV0Lzhnc1V6dk1mZzIwSTMwMndQVGV6MjBkYU4KUUhSUWpOa3dkR3JXNjBLL1RuWTBGcEUxT2VDeVVpd2RBQmlwQndJREFRQUJBb0lCQUdNTkllN2dMVi9BbzlCcApma0JaUm45bUFhcXVWVDlVZjBGVW1iRC92ZmxtNDY3Z3cvZ2orb2R0K0xOTGY4Qzh5cktHZ0lEZDNxc0p1b3FNClIyaEVlV1p6dXZSY2JRSzJDSnAwdGUwQWJsS0JBUjBMTW1pOUIwME56Q3p2WXpoT3JRN2hURzk5Z1FqRVdaa2kKeVNTalAwRkFzbkVvdlpSdVl4NFNocmtmRjF1SGhjNHVJSlYrZmNJM0k2eW9sWXY1ZmtZOUd4TElRZ2NhaGxXQQpWSE5IQmdsZWN1Ukh3Tk9jNHBRZk8rRlBFaTUvcHNzYUkrQm5ka2ZjZ0QzblBYL2RGeVNTclBIbGx4OTRvQVViCjhEREhrTnJ6aVRUOTJhNUpPZ2FSZ0d4VWg4akZyd0paVzNxUUpLMWpXUzFPVlJKSUNoS3hJSGwyNjZGMUVreWoKdFAySUFPRUNnWUVBMGxVYWNvT1NtanJkeG51bGw3aFFxdnVRbnRCWjlHTEhEeVVXaUNSZDlDaCsvaC9ndndxUAorZm1lc0swK2RkRTl6NFAzTktSdWZTQ1NVY0Q0TTZhcmN5RThiWFNKd1lwbFdZRDUzSk1PSlNRZ3pJMHo0TmtyCmVxeFR3cng4dVc2ZjIvdGJmOUtzTjFSMS9UMzFMRFRIcXllbFVKY015MHNzRkFwc1UvMzVTMDBDZ1lFQXdVRGMKcWVtdUc4b2FJcFJHNjlvOUtSZ3hWZ2x6RGRxeFg5ekU1UHlLYlpsYzhMMTVaSjBZMjlIWmlHaTFYY1N3K1ovaApYMjJpRkZwQ2Z2ZThTNzRCRUE1OEZJVVkzemxRUnBpZ3Q5Y3NFTTIvRmc3U0J2S0ZPcTNMZVVreWUvd2UyR29UCnhqOU1PVEhzNDdZTXFEcTRIV0J0aU5hMU1vMWxSY2ZHTDlkakU2TUNnWUVBcmk2ZURWRmFtZkMvOG53NUlSRVoKZE0rSjc0czV3NEg5dVZRTWVjZ3NLbU5TNzU1MG42RGVwTFFNcitGNGhWYzNxZDl1WENFRUF3bHpRdExjZU9IQQp3RUk0NmFnRjRNcDhyZ2Q2WkNsQUlJL3Z2Wlg5N1duTGNQYS9FdGpITFVVb2k2TjRIYjNZc3FWMlpMYm5qNmxSCjVUS2EyOGVMWjl1ajhDREZuelVITzAwQ2dZRUFuMjVXWGFzV1k0QzVUUHZOQXJqYUtqUDJSOGVsN3JFVUVrVDgKL3ZqRmJ5UE9CQ0ljcXYvYnlVWDMwOHltaThSQVNNQTQyMVNFR1l4WlBZdytBTEt4QjhFYlpvWmpmWTA0Qi9YVQo2YllQZVpGejZzdXhRK0FDUCtXdmJ0RVBZREFnZG1RVkNrR2dMYk5kZm9Mck1FSzVNQ3NrVW5ibnA5djB4N3ZICmFpS2tiMGNDZ1lCMStQcERhQ2pRWDcwS2pTVkVTYjJ1SU9JWjJrMUhsZzhDVlpFQ2NaandIbmY5UWROM3lLclQKVG1PdGhVNnNWK2dDQkNFNzh1VTBCbC9Ka29Bc3ZPV1hENUtKWFFMLzBwWENjdlppVXRRS3FUR0hSTTg2Y0pTawpuUGZBNTBYbm1GZityRURJSlNObksvRy9CRjI2T2kwQytMQ3hsTTFRcFZPam96UXJONG51Smc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/local-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-local-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVmxpb1B0aXMzVTZ0MHVJTjkxMG9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1USXlNREUxV2hjTk1qZ3dNVEEyTVRJeQpNREUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREN5L3BjeUc4VWZyR1NYMlFDUStYRk0yOTZzWlFlWDBJdmhObEhyaHVsd2FHVjFHZTAKc053cElNTlZIN1BqOFlmdXVOQmNydmdBd0twL1ArUVBaNDNsZWMrcXhkaTVZY1RZb3RTZ2R6VlRUdHNzT0g3cgpDK1RHK1dKRlhHNElvazFXNEduRTVydVQ0VDVyNmdaOUJIWnd1V0IxUUgxVlNtSXkzUkhQcUo5WWNXOUtwREQzCkZtZWFmOHdEOWxST0cyamc0R0dkOHlpZk15ZFpkLzlqRGJZNTg4bmpCV01NOGVQMTBla3dlcjJIUzk2NkJUV0sKUDQ0M1R4S082Y0RIOVkvd256NlZwWE53U2dpdGRTb2pibnlvS0RoV0NHNUpneHI1SUlRNUVydGtQci9ZT20wRgp6eGIzNTh1VFZqdGt5RTFXN3RJMWFlK3ZncmZJSG1na2hSbkxBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV0d0F1WSt0Yzkxd2xjK01MMmNNRGRxZ3F4azh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBQXArdWlhODRjQUpPOHlyQmVIdkdjVXRDUytkTlZ1M3JGaURmTHVhZy9DeUtoTk15b29GZ2lnCjdpQ214eXZWSFBSN0dqdlBsTCt0eVF4WHZPM2xkVWk4V0tJVDhkQXpsRnBoYkppa3d5N1h1ODJ3VW41ZjdyaEMKelpCZHlVN0daa1I0K2JMbDRQYmVqaVpHTk80L2ZoelArQStCWTdmZ0l0ZWZQcmprRmFiNytpbnVBU242b0RZSApjY05wVjNoZjVKK05vWDI3aE9XdlFoZHRNbXIzY2Z6ME5mNDNPOW9lT3hIa1EyMXRDeW9WSEdsd1V1eFpxeWxnCm1vMlIrSmlWc0twOWt0d2xqM2I5VFpLeHltSEZ0NCtxTCtWZnNSZ21ZUGYzelg0S2JmaTFPTWJtUWc3S252dHUKKzRBaGpNNTZGbFc1WEtPajkwSzBFc1d0SGF0VTVOWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRTVgzbUZHdW1zd3lRZmpHZC8rWVNJakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1USXlNREUxV2hjTk1qZ3dNVEEyTVRJeQpNREUxV2pBWU1SWXdGQVlEVlFRREV3MXNiMk5oYkMxbGRtVnlaWE4wTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBb2pWdkpobFRPdGd1SDJHNUZrVHN6aVl2WlhaUUpQQW1yRHdOR2hnU3RrVjIKUnhLZTk0emI2RUpQNStRUTc4S3VIZWpvQ2Uyd3dOQUJQZ2c1NzBqYVVrQW1JcGNKSEMzS0k4dlFYZjVwejA2Ngp4ZStpMytFZy9hbkl2YVpxN3lyaVpvYkU3eGxrWHBsMysxWjR2eU1jeGczSmNXSjZoQ3o3cmhRWDRrOE1TTFlKCkNLWHFwcXI3ZTJ3M0FWLy85cTRjVHdpUk1acXZtODVUbUk3L2VwQ2c4WWlPNDlSV0FtcXJjTTlKQlRORm13OFoKVGFDa2pUS0ZLcmJaNnhIVTNWZGN6UjRaY3MzWE1rNThkMkw1RkNCQUV5WHlkeHhXQkdVQUYxK1BJdjI3aEtXbAp6dnVFRmV1UHJWSWVNSDVIU0tBR1lrZys0bktrODRIRFhoR1RmckVVZHdJREFRQUJvMkF3WGpBT0JnTlZIUThCCkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIKL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVdHdBdVkrdGM5MXdsYytNTDJjTURkcWdxeGs4d0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQXpyL05ITU8zTDdvOEVmNFlhMTc1YiszY0RnOUx1TTJZOHFLK3dDU1R2c2V2aC9PYXpSCndSSnJJbHI4SUQ3ZDh6QnZleHVUNk1GeHZ2bEc1K2lCTjBhWWo2emdiZ2U5Z3g5dFJDckYzWWR0bEp3WU8rU2cKbDhDSmxGUXpKeGFVUkpwcEQ0WEhXaVJYUHV4YmZWdjhsR3JxL2s1eGQyQytDbTNhUjhMazl2MFVyQThhM1kwcApmRTQ4OTJ5VTdNaVhnSS94K1FBYU5nd01TdVlBSkRzazJZMk5rUGNKT0E2STdvdGMvdVU2Z1Y4ZlVYbzdjNnYzCjZCaWxlUFFyU0tnbHpOTTEwTFNVNENhUEJTSzI3RnF1Qk1MUzJBdHFZa3BVc3IvbHg2dVJUYUtWNU5ESzlpNnAKWSswSnVIUThPMEFKNFdLTzJWT0dOSWdnakpCUDJLYTZ3L2M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb0FJQkFBS0NBUUVBb2pWdkpobFRPdGd1SDJHNUZrVHN6aVl2WlhaUUpQQW1yRHdOR2hnU3RrVjJSeEtlCjk0emI2RUpQNStRUTc4S3VIZWpvQ2Uyd3dOQUJQZ2c1NzBqYVVrQW1JcGNKSEMzS0k4dlFYZjVwejA2NnhlK2kKMytFZy9hbkl2YVpxN3lyaVpvYkU3eGxrWHBsMysxWjR2eU1jeGczSmNXSjZoQ3o3cmhRWDRrOE1TTFlKQ0tYcQpwcXI3ZTJ3M0FWLy85cTRjVHdpUk1acXZtODVUbUk3L2VwQ2c4WWlPNDlSV0FtcXJjTTlKQlRORm13OFpUYUNrCmpUS0ZLcmJaNnhIVTNWZGN6UjRaY3MzWE1rNThkMkw1RkNCQUV5WHlkeHhXQkdVQUYxK1BJdjI3aEtXbHp2dUUKRmV1UHJWSWVNSDVIU0tBR1lrZys0bktrODRIRFhoR1RmckVVZHdJREFRQUJBb0lCQUJTTzFTRnRBRUZxK0oxOQpreW1oWHFuWjZSUGc1Tk5wcEYwYjEwVkJXODNDQy9XQ0JLZTNNSC9GTjc5YUJsTjh4dmgvZGprYjZOVG5CK0ZHCnhhRHdDTXQzMmQxMGF2RXBWSDhvNjZXZUF1Y0ZRV0tvdG1uTmJKTDVtN2w5aC92NzRXbkJGdUIreFZ1Lzg1YmwKSkxTRXpMYkZOSXlzUUg3VC9LblpYaFdPa3kzN3dIcm9RZFZabWdqQURXamx6d1pxaDB2RVR6bU9KVkp2UEVjbAo2clZWTUNHNVpWZ0hydWw3ZDBCdG4xbnZOQmUwK242NzRrUG9mUmY1U1dyWjFTN2RUY1Y4QU1WMFZaVkpxMDZ6ClVNNHZpSVRkV2xEaVBzb3VNZWZDMC9SRzhHVFFVZzJ2Z2ZnbXY1SXhyYStPK3ZzTkF3VmZnZG82d1UwVkdDWkgKaXVxQk01RUNnWUVBMXd5ODVkQjQvN1htQXg1RXJpYkMrRkNYUis0U1ljc2l3R0dHVy9qRitaUk1hV2JRK3hURQo4WHpITWtkVjkvSURZUkkvRTltQVVZM0NRTmRIWXd6RHhEakNVdGNXR0RFMkxoREtPeEFaWjdHZnV3RytBYWxmCjhEenFWYmtlY1kvcm5tZGZxNkdaRWZQM2JBSyt3SEQ2eWY3Yi9KQ3VqWkdwOFRhZi9pWTJKdHNDZ1lFQXdSak0KTll2UGY0MCtBOGJtRUNnRTJyRTNqdnc3V1BSWUJ5YndhdkZPTnZaZVl2YVorc3JPMGJCU1VCVWgrTkFJUXUrTQpyeGtUQXJkekt3cXczSzVKMmpSRDZaTjhPcnRXeXdlbUFyTlRvVEx0UHZpMTd1RWZjVEFPYWZRYnJYUStDaTJ0CnUzNDVlUkpqZzdsWTREajZpK1VhRFdCNjBERERnSzZ5TlkxZGxaVUNnWUI0QzN4SExhRGQzY1NRYVEwZHlqVjgKT0VDNnZvTTBaQmo2RzNiTlVJbnpVSDEzT1JYZmt6QjlQWkpVMXMxK28zS1BkWWdRcEpHazlPVkRIT21VdVVOdQovZUE4TGlUL1REbGFiYlQyVTM1YkRDU0dWK3FoTXRPRFgvM1A3STY2QmdVWlg4dGdHODArNEZsMXlmS0Jxby9VCndwZzYzT2tUemdSM3ltNTFpUThoa1FKL2VYQWUvWTN2OFVmaXVIMWVNc3I0UXBFeFg3dEJsN0FUckd2UXgzRDYKdjVZeHhndFF5MmpBcVI4NnBTS2xPdFdhWEg1Sys5UEpJT3crZ2RNM1o1STA0QVgrcitjUk9kNlh0eGdZVDVwMwovZWtKUzVFZTJoeTZxWFNQbkJMcFZTekYxNkRpb2dmQUhXUnpNV1JmZ0tSVTdhWW52RUh3K3YydjlqM24xY1lTCkZRS0JnRi9LWmZCNWc1Mjk1ZG9mSWdQdXVPTGpQdGVrMlpsSEZMRGNDVkhtZ2JuMGs3MTRSNW1FSkt0Qlk1MHMKc1FCRGpqRWhzMVJoelFCd1JIcU1xZXBnbXpQUGNnQUN3MHV5eGUwWjVENDVKZUJ5dTRkWFRaR2k1bE9mVlp5dgptV0FkQ2dOYVh4Y3VzYmRrK1dXbVRFbTkxSGRHbXc4dGprWDRHVXJWR0pPcUtwYUwKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVmxpb1B0aXMzVTZ0MHVJTjkxMG9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1USXlNREUxV2hjTk1qZ3dNVEEyTVRJeQpNREUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREN5L3BjeUc4VWZyR1NYMlFDUStYRk0yOTZzWlFlWDBJdmhObEhyaHVsd2FHVjFHZTAKc053cElNTlZIN1BqOFlmdXVOQmNydmdBd0twL1ArUVBaNDNsZWMrcXhkaTVZY1RZb3RTZ2R6VlRUdHNzT0g3cgpDK1RHK1dKRlhHNElvazFXNEduRTVydVQ0VDVyNmdaOUJIWnd1V0IxUUgxVlNtSXkzUkhQcUo5WWNXOUtwREQzCkZtZWFmOHdEOWxST0cyamc0R0dkOHlpZk15ZFpkLzlqRGJZNTg4bmpCV01NOGVQMTBla3dlcjJIUzk2NkJUV0sKUDQ0M1R4S082Y0RIOVkvd256NlZwWE53U2dpdGRTb2pibnlvS0RoV0NHNUpneHI1SUlRNUVydGtQci9ZT20wRgp6eGIzNTh1VFZqdGt5RTFXN3RJMWFlK3ZncmZJSG1na2hSbkxBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV0d0F1WSt0Yzkxd2xjK01MMmNNRGRxZ3F4azh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBQXArdWlhODRjQUpPOHlyQmVIdkdjVXRDUytkTlZ1M3JGaURmTHVhZy9DeUtoTk15b29GZ2lnCjdpQ214eXZWSFBSN0dqdlBsTCt0eVF4WHZPM2xkVWk4V0tJVDhkQXpsRnBoYkppa3d5N1h1ODJ3VW41ZjdyaEMKelpCZHlVN0daa1I0K2JMbDRQYmVqaVpHTk80L2ZoelArQStCWTdmZ0l0ZWZQcmprRmFiNytpbnVBU242b0RZSApjY05wVjNoZjVKK05vWDI3aE9XdlFoZHRNbXIzY2Z6ME5mNDNPOW9lT3hIa1EyMXRDeW9WSEdsd1V1eFpxeWxnCm1vMlIrSmlWc0twOWt0d2xqM2I5VFpLeHltSEZ0NCtxTCtWZnNSZ21ZUGYzelg0S2JmaTFPTWJtUWc3S252dHUKKzRBaGpNNTZGbFc1WEtPajkwSzBFc1d0SGF0VTVOWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRUWI0ekZZS1MxUE83bUtPTE43bjk2VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1USXlNREUxV2hjTk1qZ3dNVEEyTVRJeQpNREUxV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEaCtjMElyUDJKSXFSaG5LcC9uVkJBSm10SmhtVDN1cURST1RzYnk4QVhOM0ZocHQzUWkyZEUKTFNkbDg4WnNxRUVBeVAxdnc1d3RCbS9FejAzSk9pRFpyaldHdnBXK09OSVBnS0FPU0R6alJSREoxcVZtNUFQcApubWpLM0V5ZCtsek5hTHJUcWkxYkNpWENZL2Y3aTNuVGVWYnpwYUZHVXlQMFE4d1YzbURjMnBSR290OEdXK3NhClVadTdRdnZobzBPL1VMR3g3SDRUbmlBZlRMZmRDMVdZTzZ6TVVueGpFVjNQcUttc2Q1dk85amNCVUNZVUFnWGQKdnRNMmNNRDNtcjRyRmdybmw5OHVFUktWTk5XNndQbSthTjZmZ01URmVWK0NPOXRCWThaeDJTQXNZTUFQdERzQQpCVDFjeEJBM215MUlGRHVBVGQ0clNadnVkYTA5c2pNRkFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JTM0FDNWo2MXozWENWejR3dlp3d04ycUNyR1R6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBZCtxdTZZUGxudmZDNkFwbllnUjRJK2VJdWNvSUt1WDFabnZVUXhSWkp1b3IxQWFzRC9TcElaZVA1N3BZCjNDSk9jQ2JBamcwSkJtME9YTUJGSzdzWk5FQlAyekdDSjdUNkQvTUJHdklTcmZZMlFSVVNFQ3RxbHZQQnZZbWcKTmpVSXl3QXVtblVaTEpNaXBpQ1ZuamJ0Z0tGS01wVTF4cHg0MENRRGhFbnJzdUFDK3UwaHNtMkloRU0vYkIvSgpiRkRZOUNoU2NJUzJCd2laS0k2SXpDSUZ5SWRxRUtnTW1pVkhHSHF1TzhaU1RzUGY2TUVOWDVQMGhTU0pxRStMClYwNlRzWk03K0txWUNWR3dWcTVoVGJ4K1I3SG1PcFZTSURNdVpUUjVLK0pOaVUwOENZUWRzK20yeXlKLzEveTcKb0diQWVGNm1HdXMyUEdBZGNTRE1EZkMxdXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBNGZuTkNLejlpU0trWVp5cWY1MVFRQ1pyU1laazk3cWcwVGs3Rzh2QUZ6ZHhZYWJkCjBJdG5SQzBuWmZQR2JLaEJBTWo5YjhPY0xRWnZ4TTlOeVRvZzJhNDFocjZWdmpqU0Q0Q2dEa2c4NDBVUXlkYWwKWnVRRDZaNW95dHhNbmZwY3pXaTYwNm90V3dvbHdtUDMrNHQ1MDNsVzg2V2hSbE1qOUVQTUZkNWczTnFVUnFMZgpCbHZyR2xHYnUwTDc0YU5EdjFDeHNleCtFNTRnSDB5MzNRdFZtRHVzekZKOFl4RmR6NmlwckhlYnp2WTNBVkFtCkZBSUYzYjdUTm5EQTk1cStLeFlLNTVmZkxoRVNsVFRWdXNENXZtamVuNERFeFhsZmdqdmJRV1BHY2RrZ0xHREEKRDdRN0FBVTlYTVFRTjVzdFNCUTdnRTNlSzBtYjduV3RQYkl6QlFJREFRQUJBb0lCQVFDNzVGU1REaU9SVHZpWApJUWl6S3o1NjJIY0VuM1o4ZFBVYWdoZWZ1UDV6VDJvNjQrQXpjblhldmh5d0xNMmpzeEs1Y0dVcDlOOTZvSXQyCmZWZ1VKUDBEZ2xLSFF4aUhIZityWEN1NU5GOU1LVFVZWGgwUlBDMzBwZjVFRG9DMkttSFhlV2srYlpWZ3lVTTAKS3FNYXlKSDNRRUVJUFlPblVhSG5qQ2U1VnpuNjUwTzNhV0lBSW1nUHg2YWtWQm4zY0RNMDA0Qm5teE9wWVl3dgpZcHZVZDBobmxoQkptcW9yQ2FhYi9VWWUrWE9kZC9iVWFyY3hEN3Z0WlhoN3g0NEhwc2sybEROZUd2SS92Z21nClFaS0tZRkF0dFhlQ1M2TkphVVVkdkh3ditiUVcyTGs1NnRCeTlTL1FIZXNzNWpRMzJqYWJnZ0I5Vk5YMm94eTgKNi82Wkh6SlJBb0dCQVBQT2dWVE5lM0Y0VDZiekNhVVJEek40RThOTndWV3d5dUFXTlJKKzdUeUJVVXVTdFNJRQpiOEtpSWtQZGNDZHNndVhMYW9mVE5yMWlhWUxTOVBwTjRwRUE4T2hZZ056NFMzY0JlYm1xS1NMNndpVE9oRmt2CjkwLy9CUDcwMGVTN1NUclZwakhnT3dPNzhudmFyUXVtRUJOZUo1NlFBekVEcDJiYzBiN1FOM0g3QW9HQkFPMUgKQVJSM1NFZWk4dFlUbGJWbFV0elNWekpBb3NWTGhJcjl6ZCtOSHJIOENDQ3lITDVMMGxOUGUzTnpTakRWVTQ3SwpFQWh5UWs0d2JEc3F0cVJmS3pKWVFOekxDeUZ0NXNtYktFdWJzZTI4c01yaFlGMjZ4UHdrbHg4am9lMzJlQkZNCmoreXpHaDNhZEp1Y1dyTlNkNEkzKzNveUlidURvZ3FHTTc4eTRONy9Bb0dCQUk0cVFXSDR1OTJMb1M2aGsyTXMKVW1mWndmUmxkN0lHK0JXNC9WTityY2xWUXRsRmY5ZUpMTDRhbXM1bDVrc216Q0ZBL3lxYWI5WDQ5N3R3VmFkTApHUzBpbGxkMW5CYTl0Z3Q3MGNZQXdpSUNoSWkvMzQ2K0dJRU9ISlNxbjJXNEM5aUIwbnBNM1R5dE1KVW1DemU2CnFxOFFmUnZKc0FLNXRiaVdWTHZtWUI1WEFvR0JBS2IrRGZpRmFzMWdGV0F0TUhRVjk1ZUtRZXdRS1g2Smc2TCsKdFdIY1Evb24wdUNQK2tMRHdpYjREWDVYYWFPc3Y3NEMzLzNSekhDVEM5a29XcHFja0I1Q2xvUE9NdXM0R2ZGUgp6YTVJeVpUejg4a1ZqV2pxQmJFZlgyeCsrM3dxdHA0V01FVDZXQ3Npa0dia1I4RmxETThNNzJRMDNDRElwOGFZClpOcnZ4K3VwQW9HQkFJNGhiNEhRT3RzbDlOSlYrcTlCNGFFazFFaDlYaUx6aXQwUHN2T3lZTzFCclZWWlMvcVEKbkpVYWFLaFhRUXNaRUVVQlkyK0Ywd2xBbHRtNkF1S3R0M3Bub3A2dm1UTS9zeFN0QXUzZ2tIb3JtUHFlOXF5TwpFbXd0aTZuenFXS0VwUDQvN2h1VHFsMlRMQ3Aya25EUjd3RDN6Y0gxNms5b3F3bUdNYWZuRWtKMQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVmxpb1B0aXMzVTZ0MHVJTjkxMG9SVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1USXlNREUxV2hjTk1qZ3dNVEEyTVRJeQpNREUxV2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREN5L3BjeUc4VWZyR1NYMlFDUStYRk0yOTZzWlFlWDBJdmhObEhyaHVsd2FHVjFHZTAKc053cElNTlZIN1BqOFlmdXVOQmNydmdBd0twL1ArUVBaNDNsZWMrcXhkaTVZY1RZb3RTZ2R6VlRUdHNzT0g3cgpDK1RHK1dKRlhHNElvazFXNEduRTVydVQ0VDVyNmdaOUJIWnd1V0IxUUgxVlNtSXkzUkhQcUo5WWNXOUtwREQzCkZtZWFmOHdEOWxST0cyamc0R0dkOHlpZk15ZFpkLzlqRGJZNTg4bmpCV01NOGVQMTBla3dlcjJIUzk2NkJUV0sKUDQ0M1R4S082Y0RIOVkvd256NlZwWE53U2dpdGRTb2pibnlvS0RoV0NHNUpneHI1SUlRNUVydGtQci9ZT20wRgp6eGIzNTh1VFZqdGt5RTFXN3RJMWFlK3ZncmZJSG1na2hSbkxBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV0d0F1WSt0Yzkxd2xjK01MMmNNRGRxZ3F4azh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBQXArdWlhODRjQUpPOHlyQmVIdkdjVXRDUytkTlZ1M3JGaURmTHVhZy9DeUtoTk15b29GZ2lnCjdpQ214eXZWSFBSN0dqdlBsTCt0eVF4WHZPM2xkVWk4V0tJVDhkQXpsRnBoYkppa3d5N1h1ODJ3VW41ZjdyaEMKelpCZHlVN0daa1I0K2JMbDRQYmVqaVpHTk80L2ZoelArQStCWTdmZ0l0ZWZQcmprRmFiNytpbnVBU242b0RZSApjY05wVjNoZjVKK05vWDI3aE9XdlFoZHRNbXIzY2Z6ME5mNDNPOW9lT3hIa1EyMXRDeW9WSEdsd1V1eFpxeWxnCm1vMlIrSmlWc0twOWt0d2xqM2I5VFpLeHltSEZ0NCtxTCtWZnNSZ21ZUGYzelg0S2JmaTFPTWJtUWc3S252dHUKKzRBaGpNNTZGbFc1WEtPajkwSzBFc1d0SGF0VTVOWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRYnR0YXdKV0FxcHJRZmJudGtrMSs5REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalV3TVRBMk1USXlNREUxV2hjTk1qZ3dNVEEyTVRJeQpNREUxV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeVFFQ3ExVzN0bE9NcXlJRjRRa2MKSTRPRUR0WHd2bmt3WjJ3WTFTYU1KVGYyNVowWm1MZEg2KzVjU0hpYUdPelQ0THc0R2dyb3pvZVBzdnIvMWc0Kwp5VTZMTlJtWGlVODgzVHdGR2krN21Rdkx2dWhmbi9zL1V0ZnBJeUkwZGZsZVBNSmpzTktQc2FqalpDK1N1OVBoCnBnMWIvOURtcWNuczNSdUFlM2I0NmdISU1RbWptWGlCL2Evd28xeW9vc3JpVU04OTVpdTVzd1NVUHFVVVN6SEkKYWdTaGlOemVqdCsrTitUTFh5WnJ4QWxSbXVSUEtxYWdIY0FGOHUrcHlScWJuRHJSMnVOZkNYY0VtbVhZUElKUQoxT2h1eW0vcTFWSFNERFdGQ1ozZU85dVczQytGaFc4V3JnWmpIRSt3dVd5UHZPYTU2dlFuWFpzOG9DSG5mTzJZClhRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTM0FDNWo2MXozWENWego0d3Zad3dOMnFDckdUekI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUE2TEN1ajE4a2pvS3ZPOEw4SkRSVmI0cnRkQ2NpRDhCc3hSTnRCY2xHME1ZYVpka1MxCkU4cTBJRjZSNEo4anlBZXJTZmxVMTU2M0E4MkxZMzlnUjZaaERVQ1VmeUtRVVVzVXFCZ2daQ2ZaWDNFUzQvbDQKK1ZjaWF3NDNpcVQrU0RuanpZM1RrblVHblNkSGVaY3crbVp1aS84VTZTbmxKSU8rUFVzdExzVlZKc24xN3habwprWEt2WlhGRkNsRHp6d0t4ZXd1MFpEVGJpNkJoNlBTR2FYUTQ4TDFtV0xNbjY5T2ZnWHQyK2d5bDBnNjdYeFdGCnBoQ2FFeUFxR2I0TFQwR3hUMmlTL0IwS2ZlWUJ4ckkxYnREOVdJZ3dzOXp2M0JYZGlWY28rTmE1R1hXd1Q3UTAKcUVVcm9Ec2tQZ1FmZmlwSXF0WUJMUFFiQjMzaUhDb1ZacDJYCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeVFFQ3ExVzN0bE9NcXlJRjRRa2NJNE9FRHRYd3Zua3daMndZMVNhTUpUZjI1WjBaCm1MZEg2KzVjU0hpYUdPelQ0THc0R2dyb3pvZVBzdnIvMWc0K3lVNkxOUm1YaVU4ODNUd0ZHaSs3bVF2THZ1aGYKbi9zL1V0ZnBJeUkwZGZsZVBNSmpzTktQc2FqalpDK1N1OVBocGcxYi85RG1xY25zM1J1QWUzYjQ2Z0hJTVFtagptWGlCL2Evd28xeW9vc3JpVU04OTVpdTVzd1NVUHFVVVN6SElhZ1NoaU56ZWp0KytOK1RMWHlacnhBbFJtdVJQCktxYWdIY0FGOHUrcHlScWJuRHJSMnVOZkNYY0VtbVhZUElKUTFPaHV5bS9xMVZIU0REV0ZDWjNlTzl1VzNDK0YKaFc4V3JnWmpIRSt3dVd5UHZPYTU2dlFuWFpzOG9DSG5mTzJZWFFJREFRQUJBb0lCQUZrYWRaQjJReVkwQzF1aApqWEdnbERTNkRFUjNXbTFWVTd2RkU0MEp0WDZhUEh5MUU2KzdMOHJLczJYODhISzBLWWlxWjBSRUtjZkVHRk9ECktQNCsrbDVLenpNTzBUb3hRZzNnbVhKdVRuOGQxNGdkZ3Fac3ZqbC9OUDQ2SDM5Y3VBVy9ObW9nTFVyWVQxVU8KTWNISnYzSFk0anVZNDJmSTk1TmNxYXdScFc0MTZyazl4TjQ5cCt0SnZyRGFyUXdXQUMvdjB3RDNJZGFqeUNCVgpCUUdRVjNWVXB1MDZpeXpWUEMyMm50UDRlaHYvNzVnMldScDdIU3YxYzl0eXBNSTJEZDh4cVhrWDN4aSs0RHNJCjBLeVVqMXNaTHVSMWZQV2w0U3ZQT1FtTC9nODAvS2ZzZ29ITzUyYUc1SU9wOGx1aGhqOWhHNFZXTlJOSk9Vb1kKOXZoSW5wRUNnWUVBMlg5MGgvSGJjUUZoeEdxL2t1WXFiK2VPbjlLa0daVURTU05mWnEvak9NTVUyb0M4c3F2cgo1Tmo5dGFnK1BjSEVDVlV0RmdCbXhZR3RQYWFvdVJGU3puUzJ4eDRLNGMyQkh2SDJ6OE4vVVpKSzNSR3JKVHNNCnhFNklnckNOcDU2MVpNRHVIYU5PVmszL1JVT3JGaTFTaFN0SjlINUd3bTlyZ01iLyt0UitWSWNDZ1lFQTdKWVYKMk9XRlFXZ2xuditKVkdyS2tKblNwOTQzbi83d0k0N29jQXJhS29Ob0V0MzFCbjZydVhzM2VwR29KdytjZk1FSApRZ28rUEZLcWF0Q0pvRWJBMjJJWnhCUC8vK1BUUnBzaTV0NndWOWJjT0pvOXcwaXV6alh2ZzFoOWhLaDQwUFVTCmszKzBta0tsajVuOHRDaDFocnlNa1RPejVNczhmUGttL1puUGlQc0NnWUFhY0tzYTU2VDBuT1ZrdWxGbHEwTlgKYlQvaVgvb0EvaU56SGJDNFRBT0VYL3JHQVVadk5nVXNRZEM5NTZFQll1L1E3cURYZnQ3L2ZaOHcwblRLWXJlOQpUMlQwMmNzYTNoK25RbVR0cHVkd1pDZGpyb1V1dG5uNzEwd3pEd0Y1Y2dxOUg5TVNtVXFwcFR1MkVON1lpRlB5CnltdG9KSDIzbjFIalNzM05rVTEyT3dLQmdHN1B2VnZoNVJCRm41bGhSd2xyRzRXdkJxUHB5VlAvTEtyNi9KTysKQVlGNEd2NzdSeERMczlNa2kwKzFlWFVTTXRHYjk3Sk82ZWVITUpybklnOFlGS3lzdmpUQXlWOHBib1BibGZWYwp5R3ZjRHpuVHhLbjdHU1VzemdwUElEdEtUWXhSdldtb253YkJ3Sm9LSGZxa0dLZ0xHQ3ZLYzYvdUlWN0h0Q09FCkwxaVJBb0dCQUpZYktXaThTZ29qYmJ4YlRjRnlXY2gxTFliZW52NUEvVkxRaXNJQUZIV1l1NWgzSll2MGp1T1cKYUE5OFpzeUdiei9ieUNkaVhQeEZkUEFub1A0R1dFMkgvaW5KOS92LzJwYmMyajlENGJXMmpVeDhtL0dYbWtmTgo1Umd0QnRzOTlya3pYeWZoOERvczZ1UHZZN1h3bklFWm9iZU11ZW9kWTQ1TjIrV2ovL00vCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  enable-envoy-config: "true"
  envoy-config-retry-interval: "15s"
  enable-gateway-api: "true"
  enable-gateway-api-secrets-sync: "true"
  enable-gateway-api-proxy-protocol: "false"
  enable-gateway-api-app-protocol: "false"
  enable-gateway-api-alpn: "false"
  gateway-api-xff-num-trusted-hops: "0"
  gateway-api-service-externaltrafficpolicy: "Cluster"
  gateway-api-secrets-namespace: "cilium-secrets"
  gateway-api-hostnetwork-enabled: "false"
  gateway-api-hostnetwork-nodelabelselector: ""

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "true"

  bpf-events-drop-enabled: "true"
  bpf-events-policy-verdict-enabled: "true"
  bpf-events-trace-enabled: "true"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: everest
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "2"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-tcx: "true"
  datapath-mode: "veth"
  enable-masquerade-to-route-source: "false"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  direct-routing-skip-unreachable: "false"
  enable-local-redirect-policy: "false"
  ipv4-native-routing-cidr: 10.0.0.0/8
  enable-runtime-device-detection: "true"

  kube-proxy-replacement: "true"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  bpf-lb-sock-terminate-pod-connections: "false"
  nodeport-addresses: ""
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-mode: "dsr"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "false"
  arping-refresh-period: "30s"
  k8s-require-ipv4-pod-cidr: "true"
  k8s-require-ipv6-pod-cidr: "false"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-node-selector-labels: "false"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "true"
  ipam: "kubernetes"
  ipam-cilium-node-update-rate: "15s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "true"
  bgp-secrets-namespace: "kube-system"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "10"
  k8s-client-burst: "20"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  dnsproxy-socket-linger-timeout: "10"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-initial-fetch-timeout: "30"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "false"
  envoy-base-id: "0"

  envoy-keep-cap-netbindservice: "false"
  max-connected-clusters: "255"
  clustermesh-enable-endpoint-sync: "false"
  clustermesh-enable-mcs-api: "false"

  nat-map-stats-entries: "32"
  nat-map-stats-interval: "30s"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumbgpnodeconfigs
  - ciliumbgpadvertisements
  - ciliumbgppeerconfigs
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  - ciliumbgpnodeconfigs/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  resourceNames:
  - cilium-config
  verbs:
   # allow patching of the configmap to set annotations
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumbgppeerconfigs
  - ciliumbgpadvertisements
  - ciliumbgpnodeconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumbgpclusterconfigs.cilium.io
  - ciliumbgppeerconfigs.cilium.io
  - ciliumbgpadvertisements.cilium.io
  - ciliumbgpnodeconfigs.cilium.io
  - ciliumbgpnodeconfigoverrides.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  - ciliumbgppeeringpolicies
  - ciliumbgpclusterconfigs
  - ciliumbgpnodeconfigoverrides
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - tlsroutes
  - httproutes
  - grpcroutes
  - referencegrants
  - referencepolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  - grpcroutes/status
  - tlsroutes/status
  verbs:
  - update
  - patch
- apiGroups:
  - multicluster.x-k8s.io
  resources:
  - serviceimports
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-operator/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - update
  - patch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-bgp-control-plane-secrets
  namespace: "kube-system"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-bgp-control-plane-secrets
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-operator-gateway-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-operator-gateway-secrets
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  - name: etcd-metrics
    port: 9963
    protocol: TCP
    targetPort: etcd-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 80
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        - name: KUBERNETES_SERVICE_HOST
          value: "10.0.2.2"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        lifecycle:
          postStart:
            exec:
              command:
              - "bash"
              - "-c"
              - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset
                    
                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'
                    
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        resources:
          limits:
            cpu: 2
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-dbg
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: "10.0.2.2"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: WRITE_CNI_CONF_WHEN_READY
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: write-cni-conf-when-ready
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "10.0.2.2"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.16.5@sha256:758ca0793f5995bb938a2fa219dcce63dc0b3fa7fc4ce5cc851125281fb7361d"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          privileged: true
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host or apply sysctlfix
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
          # note: we configure the volume for the kvstoremesh-specific certificate
          # regardless of whether KVStoreMesh is enabled or not, so that it can be
          # automatically mounted in case KVStoreMesh gets subsequently enabled,
          # without requiring an agent restart.
          - secret:
              name: clustermesh-apiserver-local-cert
              optional: true
              items:
              - key: tls.key
                path: local-etcd-client.key
              - key: tls.crt
                path: local-etcd-client.crt
              - key: ca.crt
                path: local-etcd-client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # ensure pods roll when configmap updates
        cilium.io/cilium-configmap-checksum: "dd39d3492878da4d3d89724eee065214300b2813621fda9d283e00450996e62b"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.16.5@sha256:f7884848483bbcd7b1e0ccfd34ba4546f258b460cb4b7e2f06a1bcc96ef88039"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "10.0.2.2"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
        node-role.kubernetes.io/control-plane: ""
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      initContainers:
      - name: etcd-init
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - etcdinit
        # These need to match the equivalent arguments to etcd in the main container.
        - --etcd-cluster-name=clustermesh-apiserver
        - --etcd-initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --etcd-data-dir=/var/run/etcd
        env:
          # The Cilium cluster name (specified via the `CILIUM_CLUSTER_NAME` environment variable) and the etcd cluster
          # name (specified via the `--etcd-cluster-name` argument) are very different concepts. The Cilium cluster name
          # is the name of the overall Cilium cluster, and is used to set the admin account username. The etcd cluster
          # name is a concept that's only relevant for etcd itself. The etcd cluster name must be the same for both this
          # command and the actual invocation of etcd in the main containers of this Pod, but it's otherwise not
          # relevant to Cilium.
        - name: CILIUM_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        # The clustermesh-apiserver container image includes an etcd binary.
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=$(INITIAL_CLUSTER_TOKEN)
        - --auto-compaction-retention=1
        - --listen-metrics-urls=http://[$(HOSTNAME_IP)]:9963
        - --metrics=basic
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITIAL_CLUSTER_TOKEN
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        - name: etcd-metrics
          containerPort: 9963
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - clustermesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt=etcd.config=/var/lib/cilium/etcd-config.yaml
        - --kvstore-opt=etcd.qps=20
        - --kvstore-opt=etcd.bootstrapQps=10000
        - --max-connected-clusters=255
        - --health-port=9880
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        - --controller-group-metrics=all
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        readinessProbe:
          httpGet:
            path: /readyz
            port: apiserv-health
        ports:
        - name: apiserv-health
          containerPort: 9880
          protocol: TCP
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: kvstoremesh
        image: "quay.io/cilium/clustermesh-apiserver:v1.16.5@sha256:37a7fdbef806b78ef63df9f1a9828fdddbf548d1f0e43b8eb10a6bdc8fa03958"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - kvstoremesh
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt=etcd.config=/var/lib/cilium/etcd-config.yaml
        - --kvstore-opt=etcd.qps=100
        - --kvstore-opt=etcd.bootstrapQps=10000
        - --kvstore-opt=etcd.maxInflight=10
        - --clustermesh-config=/var/lib/cilium/clustermesh
        - --max-connected-clusters=255
        - --health-port=9881
        - --prometheus-serve-addr=:9964
        - --controller-group-metrics=all
        readinessProbe:
          httpGet:
            path: /readyz
            port: kvmesh-health
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
        ports:
        - name: kvmesh-health
          containerPort: 9881
          protocol: TCP
        - name: kvmesh-metrics
          containerPort: 9964
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        - name: kvstoremesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir:
          medium: ""
      - name: kvstoremesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-kvstoremesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of this pod
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "clustermesh-apiserver"
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  k8s-app: clustermesh-apiserver
              topologyKey: kubernetes.io/hostname
            weight: 100
      nodeSelector:
        kubernetes.io/os: linux
